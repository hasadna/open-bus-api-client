/* tslint:disable */
/* eslint-disable */
/**
 * Open Bus Stride API
 * ### Follow planned and real-time bus statistics ðŸšŒ  Welcome to The Public Knowledge Workshop\'s Stride project. We provide usable and accurate data about the Israeli public transportation system.  For background on the project and some more detailed documentation and usage guides, see [STRIDE.md](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE.md).  Looking for a specific use-case?  * Take a look at the **user cases** APIs below. * Try one of our existing [jupyter notebooks](https://github.com/hasadna/open-bus-stride-client/blob/main/README.md#using-the-interactive-jupyter-notebooks). * Don\'t see your use-case covered here? Please [open us a ticket](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhasadna%2Fopen-bus%2Fissues%2Fnew)!  Queries are by default limited to 100 results per query, this limit can be increased up to 500,000 results. Please try to set appropriate query parameters to limit the results to reduce load on our DB. If you do need to get large number of results (up to 500,000) it\'s recommended to use one of these methods:  1. Use HTTP streaming and JSON streaming decoder, this method is most efficient and provide accurate results.    Our [Stride Python Client iterate method](https://github.com/hasadna/open-bus-stride-client#usage) uses this method. 2. Use combination of limit / offset parameters to get results by page. This method may be less accurate because    it depends on data remaining unchanged between requests.  For more advanced usage-  * Use **gtfs** for data about the planned lines timetables.  * Use **siri** for data about lines real-time * See [Open Bus Stride Data Model](https://github.com/hasadna/open-bus-stride-db/blob/main/DATA_MODEL.md) for description of field and table names. * See [Open Bus Stride ETL Processes](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE_ETL_PROCESSES.md) for description of the ETL processes which fetch and aggregate the data. * See [MOT Developer Information](https://www.gov.il/BlobFolder/generalpage/gtfs_general_transit_feed_specifications/he/GTFS%20-%20Developer%20Information.pdf) for description of the source fields as published by the Israel Ministry of Transportation. 
 *
 * The version of the OpenAPI document: 6909b3db7b8bfa5ac3f3c4aeb3de80d2a2c75810
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SiriRidePydanticModel,
  SiriRideStopPydanticModel,
  SiriRideStopWithRelatedPydanticModel,
  SiriRideWithRelatedPydanticModel,
  SiriRoutePydanticModel,
  SiriSnapshotPydanticModel,
  SiriStopPydanticModel,
  SiriVehicleLocationPydanticModel,
  SiriVehicleLocationWithRelatedPydanticModel,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SiriRidePydanticModelFromJSON,
    SiriRidePydanticModelToJSON,
    SiriRideStopPydanticModelFromJSON,
    SiriRideStopPydanticModelToJSON,
    SiriRideStopWithRelatedPydanticModelFromJSON,
    SiriRideStopWithRelatedPydanticModelToJSON,
    SiriRideWithRelatedPydanticModelFromJSON,
    SiriRideWithRelatedPydanticModelToJSON,
    SiriRoutePydanticModelFromJSON,
    SiriRoutePydanticModelToJSON,
    SiriSnapshotPydanticModelFromJSON,
    SiriSnapshotPydanticModelToJSON,
    SiriStopPydanticModelFromJSON,
    SiriStopPydanticModelToJSON,
    SiriVehicleLocationPydanticModelFromJSON,
    SiriVehicleLocationPydanticModelToJSON,
    SiriVehicleLocationWithRelatedPydanticModelFromJSON,
    SiriVehicleLocationWithRelatedPydanticModelToJSON,
} from '../models/index';

export interface GetSiriRideStopsGetGetRequest {
    id: number;
}

export interface GetSiriRidesGetGetRequest {
    id: number;
}

export interface GetSiriRoutesGetGetRequest {
    id: number;
}

export interface GetSiriSnapshotsGetGetRequest {
    id: number;
}

export interface GetSiriStopsGetGetRequest {
    id: number;
}

export interface GetSiriVehicleLocationsGetGetRequest {
    id: number;
}

export interface ListSiriRideStopsListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    siriStopIds?: string;
    siriRideIds?: string;
    siriVehicleLocationLonGreaterOrEqual?: number;
    siriVehicleLocationLonLowerOrEqual?: number;
    siriVehicleLocationLatGreaterOrEqual?: number;
    siriVehicleLocationLatLowerOrEqual?: number;
    siriVehicleLocationRecordedAtTimeFrom?: Date;
    siriVehicleLocationRecordedAtTimeTo?: Date;
    siriRideScheduledStartTimeFrom?: Date;
    siriRideScheduledStartTimeTo?: Date;
    gtfsStopLatGreaterOrEqual?: number;
    gtfsStopLatLowerOrEqual?: number;
    gtfsStopLonGreaterOrEqual?: number;
    gtfsStopLonLowerOrEqual?: number;
    gtfsDateFrom?: Date;
    gtfsDateTo?: Date;
    orderBy?: string;
}

export interface ListSiriRidesListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    gtfsRouteDateFrom?: Date;
    gtfsRouteDateTo?: Date;
    gtfsRouteLineRefs?: string;
    gtfsRouteOperatorRefs?: string;
    gtfsRouteRouteShortName?: string;
    gtfsRouteRouteLongNameContains?: string;
    gtfsRouteRouteMkt?: string;
    gtfsRouteRouteDirection?: string;
    gtfsRouteRouteAlternative?: string;
    gtfsRouteAgencyName?: string;
    gtfsRouteRouteType?: string;
    gtfsRideGtfsRouteId?: number;
    gtfsRideJourneyRefPrefix?: string;
    gtfsRideStartTimeFrom?: Date;
    gtfsRideStartTimeTo?: Date;
    siriRouteIds?: string;
    siriRouteLineRefs?: string;
    siriRouteOperatorRefs?: string;
    journeyRefPrefix?: string;
    journeyRefs?: string;
    vehicleRefs?: string;
    scheduledStartTimeFrom?: Date;
    scheduledStartTimeTo?: Date;
    orderBy?: string;
}

export interface ListSiriRoutesListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    lineRefs?: string;
    operatorRefs?: string;
    orderBy?: string;
}

export interface ListSiriSnapshotsListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    snapshotIdPrefix?: string;
    orderBy?: string;
}

export interface ListSiriStopsListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    codes?: string;
    orderBy?: string;
}

export interface ListSiriVehicleLocationsListGetRequest {
    limit?: number;
    offset?: number;
    getCount?: boolean;
    siriVehicleLocationIds?: string;
    siriSnapshotIds?: string;
    siriRideStopIds?: string;
    recordedAtTimeFrom?: Date;
    recordedAtTimeTo?: Date;
    lonGreaterOrEqual?: number;
    lonLowerOrEqual?: number;
    latGreaterOrEqual?: number;
    latLowerOrEqual?: number;
    orderBy?: string;
    siriRoutesLineRef?: string;
    siriRideVehicleRef?: string;
    siriRoutesOperatorRef?: string;
    siriRidesSchedualedStartTimeFrom?: Date;
    siriRidesSchedualedStartTimeTo?: Date;
    siriRidesIds?: string;
    siriRoutesIds?: string;
}

/**
 * 
 */
export class SiriApi extends runtime.BaseAPI {

    /**
     * Return a single siri ride stop based on id
     * Get 
     */
    async getSiriRideStopsGetGetRaw(requestParameters: GetSiriRideStopsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriRideStopPydanticModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSiriRideStopsGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_ride_stops/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriRideStopPydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri ride stop based on id
     * Get 
     */
    async getSiriRideStopsGetGet(requestParameters: GetSiriRideStopsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriRideStopPydanticModel> {
        const response = await this.getSiriRideStopsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri ride based on id
     * Get 
     */
    async getSiriRidesGetGetRaw(requestParameters: GetSiriRidesGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriRidePydanticModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSiriRidesGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_rides/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriRidePydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri ride based on id
     * Get 
     */
    async getSiriRidesGetGet(requestParameters: GetSiriRidesGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriRidePydanticModel> {
        const response = await this.getSiriRidesGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri route based on id
     * Get 
     */
    async getSiriRoutesGetGetRaw(requestParameters: GetSiriRoutesGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriRoutePydanticModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSiriRoutesGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_routes/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriRoutePydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri route based on id
     * Get 
     */
    async getSiriRoutesGetGet(requestParameters: GetSiriRoutesGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriRoutePydanticModel> {
        const response = await this.getSiriRoutesGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri snapshot based on id
     * Get 
     */
    async getSiriSnapshotsGetGetRaw(requestParameters: GetSiriSnapshotsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriSnapshotPydanticModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSiriSnapshotsGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_snapshots/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriSnapshotPydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri snapshot based on id
     * Get 
     */
    async getSiriSnapshotsGetGet(requestParameters: GetSiriSnapshotsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriSnapshotPydanticModel> {
        const response = await this.getSiriSnapshotsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri stop based on id
     * Get 
     */
    async getSiriStopsGetGetRaw(requestParameters: GetSiriStopsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriStopPydanticModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSiriStopsGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_stops/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriStopPydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri stop based on id
     * Get 
     */
    async getSiriStopsGetGet(requestParameters: GetSiriStopsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriStopPydanticModel> {
        const response = await this.getSiriStopsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a single siri vehicle location based on id
     * Get 
     */
    async getSiriVehicleLocationsGetGetRaw(requestParameters: GetSiriVehicleLocationsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiriVehicleLocationPydanticModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSiriVehicleLocationsGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_vehicle_locations/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiriVehicleLocationPydanticModelFromJSON(jsonValue));
    }

    /**
     * Return a single siri vehicle location based on id
     * Get 
     */
    async getSiriVehicleLocationsGetGet(requestParameters: GetSiriVehicleLocationsGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiriVehicleLocationPydanticModel> {
        const response = await this.getSiriVehicleLocationsGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri ride stops.
     * List 
     */
    async listSiriRideStopsListGetRaw(requestParameters: ListSiriRideStopsListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriRideStopWithRelatedPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['getCount'] != null) {
            queryParameters['get_count'] = requestParameters['getCount'];
        }

        if (requestParameters['siriStopIds'] != null) {
            queryParameters['siri_stop_ids'] = requestParameters['siriStopIds'];
        }

        if (requestParameters['siriRideIds'] != null) {
            queryParameters['siri_ride_ids'] = requestParameters['siriRideIds'];
        }

        if (requestParameters['siriVehicleLocationLonGreaterOrEqual'] != null) {
            queryParameters['siri_vehicle_location__lon__greater_or_equal'] = requestParameters['siriVehicleLocationLonGreaterOrEqual'];
        }

        if (requestParameters['siriVehicleLocationLonLowerOrEqual'] != null) {
            queryParameters['siri_vehicle_location__lon__lower_or_equal'] = requestParameters['siriVehicleLocationLonLowerOrEqual'];
        }

        if (requestParameters['siriVehicleLocationLatGreaterOrEqual'] != null) {
            queryParameters['siri_vehicle_location__lat__greater_or_equal'] = requestParameters['siriVehicleLocationLatGreaterOrEqual'];
        }

        if (requestParameters['siriVehicleLocationLatLowerOrEqual'] != null) {
            queryParameters['siri_vehicle_location__lat__lower_or_equal'] = requestParameters['siriVehicleLocationLatLowerOrEqual'];
        }

        if (requestParameters['siriVehicleLocationRecordedAtTimeFrom'] != null) {
            queryParameters['siri_vehicle_location__recorded_at_time_from'] = (requestParameters['siriVehicleLocationRecordedAtTimeFrom'] as any).toISOString();
        }

        if (requestParameters['siriVehicleLocationRecordedAtTimeTo'] != null) {
            queryParameters['siri_vehicle_location__recorded_at_time_to'] = (requestParameters['siriVehicleLocationRecordedAtTimeTo'] as any).toISOString();
        }

        if (requestParameters['siriRideScheduledStartTimeFrom'] != null) {
            queryParameters['siri_ride__scheduled_start_time_from'] = (requestParameters['siriRideScheduledStartTimeFrom'] as any).toISOString();
        }

        if (requestParameters['siriRideScheduledStartTimeTo'] != null) {
            queryParameters['siri_ride__scheduled_start_time_to'] = (requestParameters['siriRideScheduledStartTimeTo'] as any).toISOString();
        }

        if (requestParameters['gtfsStopLatGreaterOrEqual'] != null) {
            queryParameters['gtfs_stop__lat__greater_or_equal'] = requestParameters['gtfsStopLatGreaterOrEqual'];
        }

        if (requestParameters['gtfsStopLatLowerOrEqual'] != null) {
            queryParameters['gtfs_stop__lat__lower_or_equal'] = requestParameters['gtfsStopLatLowerOrEqual'];
        }

        if (requestParameters['gtfsStopLonGreaterOrEqual'] != null) {
            queryParameters['gtfs_stop__lon__greater_or_equal'] = requestParameters['gtfsStopLonGreaterOrEqual'];
        }

        if (requestParameters['gtfsStopLonLowerOrEqual'] != null) {
            queryParameters['gtfs_stop__lon__lower_or_equal'] = requestParameters['gtfsStopLonLowerOrEqual'];
        }

        if (requestParameters['gtfsDateFrom'] != null) {
            queryParameters['gtfs_date_from'] = (requestParameters['gtfsDateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['gtfsDateTo'] != null) {
            queryParameters['gtfs_date_to'] = (requestParameters['gtfsDateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_ride_stops/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriRideStopWithRelatedPydanticModelFromJSON));
    }

    /**
     * List of siri ride stops.
     * List 
     */
    async listSiriRideStopsListGet(requestParameters: ListSiriRideStopsListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriRideStopWithRelatedPydanticModel>> {
        const response = await this.listSiriRideStopsListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri rides.
     * List 
     */
    async listSiriRidesListGetRaw(requestParameters: ListSiriRidesListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriRideWithRelatedPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['getCount'] != null) {
            queryParameters['get_count'] = requestParameters['getCount'];
        }

        if (requestParameters['gtfsRouteDateFrom'] != null) {
            queryParameters['gtfs_route__date_from'] = (requestParameters['gtfsRouteDateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['gtfsRouteDateTo'] != null) {
            queryParameters['gtfs_route__date_to'] = (requestParameters['gtfsRouteDateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['gtfsRouteLineRefs'] != null) {
            queryParameters['gtfs_route__line_refs'] = requestParameters['gtfsRouteLineRefs'];
        }

        if (requestParameters['gtfsRouteOperatorRefs'] != null) {
            queryParameters['gtfs_route__operator_refs'] = requestParameters['gtfsRouteOperatorRefs'];
        }

        if (requestParameters['gtfsRouteRouteShortName'] != null) {
            queryParameters['gtfs_route__route_short_name'] = requestParameters['gtfsRouteRouteShortName'];
        }

        if (requestParameters['gtfsRouteRouteLongNameContains'] != null) {
            queryParameters['gtfs_route__route_long_name_contains'] = requestParameters['gtfsRouteRouteLongNameContains'];
        }

        if (requestParameters['gtfsRouteRouteMkt'] != null) {
            queryParameters['gtfs_route__route_mkt'] = requestParameters['gtfsRouteRouteMkt'];
        }

        if (requestParameters['gtfsRouteRouteDirection'] != null) {
            queryParameters['gtfs_route__route_direction'] = requestParameters['gtfsRouteRouteDirection'];
        }

        if (requestParameters['gtfsRouteRouteAlternative'] != null) {
            queryParameters['gtfs_route__route_alternative'] = requestParameters['gtfsRouteRouteAlternative'];
        }

        if (requestParameters['gtfsRouteAgencyName'] != null) {
            queryParameters['gtfs_route__agency_name'] = requestParameters['gtfsRouteAgencyName'];
        }

        if (requestParameters['gtfsRouteRouteType'] != null) {
            queryParameters['gtfs_route__route_type'] = requestParameters['gtfsRouteRouteType'];
        }

        if (requestParameters['gtfsRideGtfsRouteId'] != null) {
            queryParameters['gtfs_ride__gtfs_route_id'] = requestParameters['gtfsRideGtfsRouteId'];
        }

        if (requestParameters['gtfsRideJourneyRefPrefix'] != null) {
            queryParameters['gtfs_ride__journey_ref_prefix'] = requestParameters['gtfsRideJourneyRefPrefix'];
        }

        if (requestParameters['gtfsRideStartTimeFrom'] != null) {
            queryParameters['gtfs_ride__start_time_from'] = (requestParameters['gtfsRideStartTimeFrom'] as any).toISOString();
        }

        if (requestParameters['gtfsRideStartTimeTo'] != null) {
            queryParameters['gtfs_ride__start_time_to'] = (requestParameters['gtfsRideStartTimeTo'] as any).toISOString();
        }

        if (requestParameters['siriRouteIds'] != null) {
            queryParameters['siri_route_ids'] = requestParameters['siriRouteIds'];
        }

        if (requestParameters['siriRouteLineRefs'] != null) {
            queryParameters['siri_route__line_refs'] = requestParameters['siriRouteLineRefs'];
        }

        if (requestParameters['siriRouteOperatorRefs'] != null) {
            queryParameters['siri_route__operator_refs'] = requestParameters['siriRouteOperatorRefs'];
        }

        if (requestParameters['journeyRefPrefix'] != null) {
            queryParameters['journey_ref_prefix'] = requestParameters['journeyRefPrefix'];
        }

        if (requestParameters['journeyRefs'] != null) {
            queryParameters['journey_refs'] = requestParameters['journeyRefs'];
        }

        if (requestParameters['vehicleRefs'] != null) {
            queryParameters['vehicle_refs'] = requestParameters['vehicleRefs'];
        }

        if (requestParameters['scheduledStartTimeFrom'] != null) {
            queryParameters['scheduled_start_time_from'] = (requestParameters['scheduledStartTimeFrom'] as any).toISOString();
        }

        if (requestParameters['scheduledStartTimeTo'] != null) {
            queryParameters['scheduled_start_time_to'] = (requestParameters['scheduledStartTimeTo'] as any).toISOString();
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_rides/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriRideWithRelatedPydanticModelFromJSON));
    }

    /**
     * List of siri rides.
     * List 
     */
    async listSiriRidesListGet(requestParameters: ListSiriRidesListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriRideWithRelatedPydanticModel>> {
        const response = await this.listSiriRidesListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri routes.
     * List 
     */
    async listSiriRoutesListGetRaw(requestParameters: ListSiriRoutesListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriRoutePydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['getCount'] != null) {
            queryParameters['get_count'] = requestParameters['getCount'];
        }

        if (requestParameters['lineRefs'] != null) {
            queryParameters['line_refs'] = requestParameters['lineRefs'];
        }

        if (requestParameters['operatorRefs'] != null) {
            queryParameters['operator_refs'] = requestParameters['operatorRefs'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_routes/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriRoutePydanticModelFromJSON));
    }

    /**
     * List of siri routes.
     * List 
     */
    async listSiriRoutesListGet(requestParameters: ListSiriRoutesListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriRoutePydanticModel>> {
        const response = await this.listSiriRoutesListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri snapshots.
     * List 
     */
    async listSiriSnapshotsListGetRaw(requestParameters: ListSiriSnapshotsListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriSnapshotPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['getCount'] != null) {
            queryParameters['get_count'] = requestParameters['getCount'];
        }

        if (requestParameters['snapshotIdPrefix'] != null) {
            queryParameters['snapshot_id_prefix'] = requestParameters['snapshotIdPrefix'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_snapshots/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriSnapshotPydanticModelFromJSON));
    }

    /**
     * List of siri snapshots.
     * List 
     */
    async listSiriSnapshotsListGet(requestParameters: ListSiriSnapshotsListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriSnapshotPydanticModel>> {
        const response = await this.listSiriSnapshotsListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri stops.
     * List 
     */
    async listSiriStopsListGetRaw(requestParameters: ListSiriStopsListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriStopPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['getCount'] != null) {
            queryParameters['get_count'] = requestParameters['getCount'];
        }

        if (requestParameters['codes'] != null) {
            queryParameters['codes'] = requestParameters['codes'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_stops/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriStopPydanticModelFromJSON));
    }

    /**
     * List of siri stops.
     * List 
     */
    async listSiriStopsListGet(requestParameters: ListSiriStopsListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriStopPydanticModel>> {
        const response = await this.listSiriStopsListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of siri vehicle locations.
     * List 
     */
    async listSiriVehicleLocationsListGetRaw(requestParameters: ListSiriVehicleLocationsListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SiriVehicleLocationWithRelatedPydanticModel>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['getCount'] != null) {
            queryParameters['get_count'] = requestParameters['getCount'];
        }

        if (requestParameters['siriVehicleLocationIds'] != null) {
            queryParameters['siri_vehicle_location_ids'] = requestParameters['siriVehicleLocationIds'];
        }

        if (requestParameters['siriSnapshotIds'] != null) {
            queryParameters['siri_snapshot_ids'] = requestParameters['siriSnapshotIds'];
        }

        if (requestParameters['siriRideStopIds'] != null) {
            queryParameters['siri_ride_stop_ids'] = requestParameters['siriRideStopIds'];
        }

        if (requestParameters['recordedAtTimeFrom'] != null) {
            queryParameters['recorded_at_time_from'] = (requestParameters['recordedAtTimeFrom'] as any).toISOString();
        }

        if (requestParameters['recordedAtTimeTo'] != null) {
            queryParameters['recorded_at_time_to'] = (requestParameters['recordedAtTimeTo'] as any).toISOString();
        }

        if (requestParameters['lonGreaterOrEqual'] != null) {
            queryParameters['lon__greater_or_equal'] = requestParameters['lonGreaterOrEqual'];
        }

        if (requestParameters['lonLowerOrEqual'] != null) {
            queryParameters['lon__lower_or_equal'] = requestParameters['lonLowerOrEqual'];
        }

        if (requestParameters['latGreaterOrEqual'] != null) {
            queryParameters['lat__greater_or_equal'] = requestParameters['latGreaterOrEqual'];
        }

        if (requestParameters['latLowerOrEqual'] != null) {
            queryParameters['lat__lower_or_equal'] = requestParameters['latLowerOrEqual'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        if (requestParameters['siriRoutesLineRef'] != null) {
            queryParameters['siri_routes__line_ref'] = requestParameters['siriRoutesLineRef'];
        }

        if (requestParameters['siriRideVehicleRef'] != null) {
            queryParameters['siri_ride__vehicle_ref'] = requestParameters['siriRideVehicleRef'];
        }

        if (requestParameters['siriRoutesOperatorRef'] != null) {
            queryParameters['siri_routes__operator_ref'] = requestParameters['siriRoutesOperatorRef'];
        }

        if (requestParameters['siriRidesSchedualedStartTimeFrom'] != null) {
            queryParameters['siri_rides__schedualed_start_time_from'] = (requestParameters['siriRidesSchedualedStartTimeFrom'] as any).toISOString();
        }

        if (requestParameters['siriRidesSchedualedStartTimeTo'] != null) {
            queryParameters['siri_rides__schedualed_start_time_to'] = (requestParameters['siriRidesSchedualedStartTimeTo'] as any).toISOString();
        }

        if (requestParameters['siriRidesIds'] != null) {
            queryParameters['siri_rides__ids'] = requestParameters['siriRidesIds'];
        }

        if (requestParameters['siriRoutesIds'] != null) {
            queryParameters['siri_routes__ids'] = requestParameters['siriRoutesIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/siri_vehicle_locations/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiriVehicleLocationWithRelatedPydanticModelFromJSON));
    }

    /**
     * List of siri vehicle locations.
     * List 
     */
    async listSiriVehicleLocationsListGet(requestParameters: ListSiriVehicleLocationsListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SiriVehicleLocationWithRelatedPydanticModel>> {
        const response = await this.listSiriVehicleLocationsListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
