/* tslint:disable */
/* eslint-disable */
/**
 * Open Bus Stride API
 * ### Follow planned and real-time bus statistics ðŸšŒ  Welcome to The Public Knowledge Workshop\'s Stride project. We provide usable and accurate data about the Israeli public transportation system.  For background on the project and some more detailed documentation and usage guides, see [STRIDE.md](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE.md).  Looking for a specific use-case?  * Take a look at the **user cases** APIs below. * Try one of our existing [jupyter notebooks](https://github.com/hasadna/open-bus-stride-client/blob/main/README.md#using-the-interactive-jupyter-notebooks). * Don\'t see your use-case covered here? Please [open us a ticket](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhasadna%2Fopen-bus%2Fissues%2Fnew)!  Queries are by default limited to 100 results per query, this limit can be increased up to 500,000 results. Please try to set appropriate query parameters to limit the results to reduce load on our DB. If you do need to get large number of results (up to 500,000) it\'s recommended to use one of these methods:  1. Use HTTP streaming and JSON streaming decoder, this method is most efficient and provide accurate results.    Our [Stride Python Client iterate method](https://github.com/hasadna/open-bus-stride-client#usage) uses this method. 2. Use combination of limit / offset parameters to get results by page. This method may be less accurate because    it depends on data remaining unchanged between requests.  For more advanced usage-  * Use **gtfs** for data about the planned lines timetables.  * Use **siri** for data about lines real-time * See [Open Bus Stride Data Model](https://github.com/hasadna/open-bus-stride-db/blob/main/DATA_MODEL.md) for description of field and table names. * See [Open Bus Stride ETL Processes](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE_ETL_PROCESSES.md) for description of the ETL processes which fetch and aggregate the data. * See [MOT Developer Information](https://www.gov.il/BlobFolder/generalpage/gtfs_general_transit_feed_specifications/he/GTFS%20-%20Developer%20Information.pdf) for description of the source fields as published by the Israel Ministry of Transportation. 
 *
 * The version of the OpenAPI document: 27215a215d186e543c9bf70c73529f0a6872483e
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GtfsAgencyPydanticModel } from '../models';
// @ts-ignore
import type { GtfsRidePydanticModel } from '../models';
// @ts-ignore
import type { GtfsRideStopPydanticModel } from '../models';
// @ts-ignore
import type { GtfsRideStopWithRelatedPydanticModel } from '../models';
// @ts-ignore
import type { GtfsRideWithRelatedPydanticModel } from '../models';
// @ts-ignore
import type { GtfsRoutePydanticModel } from '../models';
// @ts-ignore
import type { GtfsStopPydanticModel } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * GtfsApi - axios parameter creator
 * @export
 */
export const GtfsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a single gtfs ride stop based on id
         * @summary Get 
         * @param {number} id gtfs ride stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsRideStopsGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGtfsRideStopsGetGet', 'id', id)
            const localVarPath = `/gtfs_ride_stops/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single gtfs ride based on id
         * @summary Get 
         * @param {number} id gtfs ride id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsRidesGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGtfsRidesGetGet', 'id', id)
            const localVarPath = `/gtfs_rides/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single gtfs route based on id
         * @summary Get 
         * @param {number} id gtfs route id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsRoutesGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGtfsRoutesGetGet', 'id', id)
            const localVarPath = `/gtfs_routes/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single gtfs stop based on id
         * @summary Get 
         * @param {number} id gtfs stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsStopsGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGtfsStopsGetGet', 'id', id)
            const localVarPath = `/gtfs_stops/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of gtfs agencies.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsAgenciesListGet: async (limit?: number, offset?: number, dateFrom?: string, dateTo?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gtfs_agencies/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of gtfs ride stops.  Due to large number of items in the table, you must filter the results by at least one of the following:  1. gtfs_ride_ids - containing a single gtfs ride id. 2. arrival_time_from and arrival_time_to - containing a time range.  Additional filters can be applied in addition to one of the above options to narrow down the results.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [arrivalTimeFrom]   Filter by arrival time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [arrivalTimeTo]   Filter by arrival time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsStopIds]   Filter by gtfs stop id. Comma-separated list of values.
         * @param {string} [gtfsRideIds]   Filter by gtfs ride id. Comma-separated list of values.
         * @param {number} [gtfsRideGtfsRouteId]   Filter by related gtfs ride\&#39;s gtfs route id. Only return items which exactly match given string.
         * @param {string} [gtfsRideJourneyRefPrefix]   Filter by related gtfs ride\&#39;s journey ref prefix. Only return items which start with given string.
         * @param {string} [gtfsRideStartTimeFrom]   Filter by related gtfs ride\&#39;s start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRideStartTimeTo]   Filter by related gtfs ride\&#39;s start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsStopDateFrom]   Filter by related gtfs stop\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsStopDateTo]   Filter by related gtfs stop\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [gtfsStopCode]   Filter by related gtfs stop\&#39;s code. Only return items which exactly match given string.
         * @param {string} [gtfsStopCity]   Filter by related gtfs stop\&#39;s city. Only return items which exactly match given string.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsRideStopsListGet: async (limit?: number, offset?: number, getCount?: boolean, arrivalTimeFrom?: string, arrivalTimeTo?: string, gtfsStopIds?: string, gtfsRideIds?: string, gtfsRideGtfsRouteId?: number, gtfsRideJourneyRefPrefix?: string, gtfsRideStartTimeFrom?: string, gtfsRideStartTimeTo?: string, gtfsStopDateFrom?: string, gtfsStopDateTo?: string, gtfsStopCode?: number, gtfsStopCity?: string, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gtfs_ride_stops/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (arrivalTimeFrom !== undefined) {
                localVarQueryParameter['arrival_time_from'] = (arrivalTimeFrom as any instanceof Date) ?
                    (arrivalTimeFrom as any).toISOString() :
                    arrivalTimeFrom;
            }

            if (arrivalTimeTo !== undefined) {
                localVarQueryParameter['arrival_time_to'] = (arrivalTimeTo as any instanceof Date) ?
                    (arrivalTimeTo as any).toISOString() :
                    arrivalTimeTo;
            }

            if (gtfsStopIds !== undefined) {
                localVarQueryParameter['gtfs_stop_ids'] = gtfsStopIds;
            }

            if (gtfsRideIds !== undefined) {
                localVarQueryParameter['gtfs_ride_ids'] = gtfsRideIds;
            }

            if (gtfsRideGtfsRouteId !== undefined) {
                localVarQueryParameter['gtfs_ride__gtfs_route_id'] = gtfsRideGtfsRouteId;
            }

            if (gtfsRideJourneyRefPrefix !== undefined) {
                localVarQueryParameter['gtfs_ride__journey_ref_prefix'] = gtfsRideJourneyRefPrefix;
            }

            if (gtfsRideStartTimeFrom !== undefined) {
                localVarQueryParameter['gtfs_ride__start_time_from'] = (gtfsRideStartTimeFrom as any instanceof Date) ?
                    (gtfsRideStartTimeFrom as any).toISOString() :
                    gtfsRideStartTimeFrom;
            }

            if (gtfsRideStartTimeTo !== undefined) {
                localVarQueryParameter['gtfs_ride__start_time_to'] = (gtfsRideStartTimeTo as any instanceof Date) ?
                    (gtfsRideStartTimeTo as any).toISOString() :
                    gtfsRideStartTimeTo;
            }

            if (gtfsStopDateFrom !== undefined) {
                localVarQueryParameter['gtfs_stop__date_from'] = (gtfsStopDateFrom as any instanceof Date) ?
                    (gtfsStopDateFrom as any).toISOString().substring(0,10) :
                    gtfsStopDateFrom;
            }

            if (gtfsStopDateTo !== undefined) {
                localVarQueryParameter['gtfs_stop__date_to'] = (gtfsStopDateTo as any instanceof Date) ?
                    (gtfsStopDateTo as any).toISOString().substring(0,10) :
                    gtfsStopDateTo;
            }

            if (gtfsStopCode !== undefined) {
                localVarQueryParameter['gtfs_stop__code'] = gtfsStopCode;
            }

            if (gtfsStopCity !== undefined) {
                localVarQueryParameter['gtfs_stop__city'] = gtfsStopCity;
            }

            if (gtfsRouteDateFrom !== undefined) {
                localVarQueryParameter['gtfs_route__date_from'] = (gtfsRouteDateFrom as any instanceof Date) ?
                    (gtfsRouteDateFrom as any).toISOString().substring(0,10) :
                    gtfsRouteDateFrom;
            }

            if (gtfsRouteDateTo !== undefined) {
                localVarQueryParameter['gtfs_route__date_to'] = (gtfsRouteDateTo as any instanceof Date) ?
                    (gtfsRouteDateTo as any).toISOString().substring(0,10) :
                    gtfsRouteDateTo;
            }

            if (gtfsRouteLineRefs !== undefined) {
                localVarQueryParameter['gtfs_route__line_refs'] = gtfsRouteLineRefs;
            }

            if (gtfsRouteOperatorRefs !== undefined) {
                localVarQueryParameter['gtfs_route__operator_refs'] = gtfsRouteOperatorRefs;
            }

            if (gtfsRouteRouteShortName !== undefined) {
                localVarQueryParameter['gtfs_route__route_short_name'] = gtfsRouteRouteShortName;
            }

            if (gtfsRouteRouteLongNameContains !== undefined) {
                localVarQueryParameter['gtfs_route__route_long_name_contains'] = gtfsRouteRouteLongNameContains;
            }

            if (gtfsRouteRouteMkt !== undefined) {
                localVarQueryParameter['gtfs_route__route_mkt'] = gtfsRouteRouteMkt;
            }

            if (gtfsRouteRouteDirection !== undefined) {
                localVarQueryParameter['gtfs_route__route_direction'] = gtfsRouteRouteDirection;
            }

            if (gtfsRouteRouteAlternative !== undefined) {
                localVarQueryParameter['gtfs_route__route_alternative'] = gtfsRouteRouteAlternative;
            }

            if (gtfsRouteAgencyName !== undefined) {
                localVarQueryParameter['gtfs_route__agency_name'] = gtfsRouteAgencyName;
            }

            if (gtfsRouteRouteType !== undefined) {
                localVarQueryParameter['gtfs_route__route_type'] = gtfsRouteRouteType;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of gtfs rides.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {number} [gtfsRouteId]   Filter by gtfs route id. Only return items which exactly match given string.
         * @param {string} [journeyRefPrefix]   Filter by journey ref prefix. Only return items which start with given string.
         * @param {string} [startTimeFrom]   Filter by start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [startTimeTo]   Filter by start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsRidesListGet: async (limit?: number, offset?: number, getCount?: boolean, gtfsRouteId?: number, journeyRefPrefix?: string, startTimeFrom?: string, startTimeTo?: string, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gtfs_rides/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (gtfsRouteId !== undefined) {
                localVarQueryParameter['gtfs_route_id'] = gtfsRouteId;
            }

            if (journeyRefPrefix !== undefined) {
                localVarQueryParameter['journey_ref_prefix'] = journeyRefPrefix;
            }

            if (startTimeFrom !== undefined) {
                localVarQueryParameter['start_time_from'] = (startTimeFrom as any instanceof Date) ?
                    (startTimeFrom as any).toISOString() :
                    startTimeFrom;
            }

            if (startTimeTo !== undefined) {
                localVarQueryParameter['start_time_to'] = (startTimeTo as any instanceof Date) ?
                    (startTimeTo as any).toISOString() :
                    startTimeTo;
            }

            if (gtfsRouteDateFrom !== undefined) {
                localVarQueryParameter['gtfs_route__date_from'] = (gtfsRouteDateFrom as any instanceof Date) ?
                    (gtfsRouteDateFrom as any).toISOString().substring(0,10) :
                    gtfsRouteDateFrom;
            }

            if (gtfsRouteDateTo !== undefined) {
                localVarQueryParameter['gtfs_route__date_to'] = (gtfsRouteDateTo as any instanceof Date) ?
                    (gtfsRouteDateTo as any).toISOString().substring(0,10) :
                    gtfsRouteDateTo;
            }

            if (gtfsRouteLineRefs !== undefined) {
                localVarQueryParameter['gtfs_route__line_refs'] = gtfsRouteLineRefs;
            }

            if (gtfsRouteOperatorRefs !== undefined) {
                localVarQueryParameter['gtfs_route__operator_refs'] = gtfsRouteOperatorRefs;
            }

            if (gtfsRouteRouteShortName !== undefined) {
                localVarQueryParameter['gtfs_route__route_short_name'] = gtfsRouteRouteShortName;
            }

            if (gtfsRouteRouteLongNameContains !== undefined) {
                localVarQueryParameter['gtfs_route__route_long_name_contains'] = gtfsRouteRouteLongNameContains;
            }

            if (gtfsRouteRouteMkt !== undefined) {
                localVarQueryParameter['gtfs_route__route_mkt'] = gtfsRouteRouteMkt;
            }

            if (gtfsRouteRouteDirection !== undefined) {
                localVarQueryParameter['gtfs_route__route_direction'] = gtfsRouteRouteDirection;
            }

            if (gtfsRouteRouteAlternative !== undefined) {
                localVarQueryParameter['gtfs_route__route_alternative'] = gtfsRouteRouteAlternative;
            }

            if (gtfsRouteAgencyName !== undefined) {
                localVarQueryParameter['gtfs_route__agency_name'] = gtfsRouteAgencyName;
            }

            if (gtfsRouteRouteType !== undefined) {
                localVarQueryParameter['gtfs_route__route_type'] = gtfsRouteRouteType;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of gtfs routes.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [lineRefs]   Filter by line ref. Comma-separated list of values.
         * @param {string} [operatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [routeShortName] Line number.  Filter by route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [routeLongNameContains]   Filter by route long name. Only return items which contain given string.
         * @param {string} [routeMkt]   Filter by route mkt. Only return items which exactly match given string.
         * @param {string} [routeDirection]   Filter by route direction. Only return items which exactly match given string.
         * @param {string} [routeAlternative]   Filter by route alternative. Only return items which exactly match given string.
         * @param {string} [agencyName]   Filter by agency name. Only return items which exactly match given string.
         * @param {string} [routeType]   Filter by route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsRoutesListGet: async (limit?: number, offset?: number, getCount?: boolean, dateFrom?: string, dateTo?: string, lineRefs?: string, operatorRefs?: string, routeShortName?: string, routeLongNameContains?: string, routeMkt?: string, routeDirection?: string, routeAlternative?: string, agencyName?: string, routeType?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gtfs_routes/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }

            if (lineRefs !== undefined) {
                localVarQueryParameter['line_refs'] = lineRefs;
            }

            if (operatorRefs !== undefined) {
                localVarQueryParameter['operator_refs'] = operatorRefs;
            }

            if (routeShortName !== undefined) {
                localVarQueryParameter['route_short_name'] = routeShortName;
            }

            if (routeLongNameContains !== undefined) {
                localVarQueryParameter['route_long_name_contains'] = routeLongNameContains;
            }

            if (routeMkt !== undefined) {
                localVarQueryParameter['route_mkt'] = routeMkt;
            }

            if (routeDirection !== undefined) {
                localVarQueryParameter['route_direction'] = routeDirection;
            }

            if (routeAlternative !== undefined) {
                localVarQueryParameter['route_alternative'] = routeAlternative;
            }

            if (agencyName !== undefined) {
                localVarQueryParameter['agency_name'] = agencyName;
            }

            if (routeType !== undefined) {
                localVarQueryParameter['route_type'] = routeType;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of gtfs stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [code]   Filter by code. Only return items which exactly match given string.
         * @param {string} [city]   Filter by city. Only return items which exactly match given string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsStopsListGet: async (limit?: number, offset?: number, getCount?: boolean, dateFrom?: string, dateTo?: string, code?: number, city?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/gtfs_stops/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GtfsApi - functional programming interface
 * @export
 */
export const GtfsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GtfsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return a single gtfs ride stop based on id
         * @summary Get 
         * @param {number} id gtfs ride stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtfsRideStopsGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtfsRideStopPydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGtfsRideStopsGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.getGtfsRideStopsGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a single gtfs ride based on id
         * @summary Get 
         * @param {number} id gtfs ride id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtfsRidesGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtfsRidePydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGtfsRidesGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.getGtfsRidesGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a single gtfs route based on id
         * @summary Get 
         * @param {number} id gtfs route id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtfsRoutesGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtfsRoutePydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGtfsRoutesGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.getGtfsRoutesGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a single gtfs stop based on id
         * @summary Get 
         * @param {number} id gtfs stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGtfsStopsGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GtfsStopPydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGtfsStopsGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.getGtfsStopsGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of gtfs agencies.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsAgenciesListGet(limit?: number, offset?: number, dateFrom?: string, dateTo?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtfsAgencyPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGtfsAgenciesListGet(limit, offset, dateFrom, dateTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.listGtfsAgenciesListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of gtfs ride stops.  Due to large number of items in the table, you must filter the results by at least one of the following:  1. gtfs_ride_ids - containing a single gtfs ride id. 2. arrival_time_from and arrival_time_to - containing a time range.  Additional filters can be applied in addition to one of the above options to narrow down the results.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [arrivalTimeFrom]   Filter by arrival time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [arrivalTimeTo]   Filter by arrival time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsStopIds]   Filter by gtfs stop id. Comma-separated list of values.
         * @param {string} [gtfsRideIds]   Filter by gtfs ride id. Comma-separated list of values.
         * @param {number} [gtfsRideGtfsRouteId]   Filter by related gtfs ride\&#39;s gtfs route id. Only return items which exactly match given string.
         * @param {string} [gtfsRideJourneyRefPrefix]   Filter by related gtfs ride\&#39;s journey ref prefix. Only return items which start with given string.
         * @param {string} [gtfsRideStartTimeFrom]   Filter by related gtfs ride\&#39;s start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRideStartTimeTo]   Filter by related gtfs ride\&#39;s start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsStopDateFrom]   Filter by related gtfs stop\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsStopDateTo]   Filter by related gtfs stop\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [gtfsStopCode]   Filter by related gtfs stop\&#39;s code. Only return items which exactly match given string.
         * @param {string} [gtfsStopCity]   Filter by related gtfs stop\&#39;s city. Only return items which exactly match given string.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsRideStopsListGet(limit?: number, offset?: number, getCount?: boolean, arrivalTimeFrom?: string, arrivalTimeTo?: string, gtfsStopIds?: string, gtfsRideIds?: string, gtfsRideGtfsRouteId?: number, gtfsRideJourneyRefPrefix?: string, gtfsRideStartTimeFrom?: string, gtfsRideStartTimeTo?: string, gtfsStopDateFrom?: string, gtfsStopDateTo?: string, gtfsStopCode?: number, gtfsStopCity?: string, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtfsRideStopWithRelatedPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGtfsRideStopsListGet(limit, offset, getCount, arrivalTimeFrom, arrivalTimeTo, gtfsStopIds, gtfsRideIds, gtfsRideGtfsRouteId, gtfsRideJourneyRefPrefix, gtfsRideStartTimeFrom, gtfsRideStartTimeTo, gtfsStopDateFrom, gtfsStopDateTo, gtfsStopCode, gtfsStopCity, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.listGtfsRideStopsListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of gtfs rides.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {number} [gtfsRouteId]   Filter by gtfs route id. Only return items which exactly match given string.
         * @param {string} [journeyRefPrefix]   Filter by journey ref prefix. Only return items which start with given string.
         * @param {string} [startTimeFrom]   Filter by start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [startTimeTo]   Filter by start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsRidesListGet(limit?: number, offset?: number, getCount?: boolean, gtfsRouteId?: number, journeyRefPrefix?: string, startTimeFrom?: string, startTimeTo?: string, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtfsRideWithRelatedPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGtfsRidesListGet(limit, offset, getCount, gtfsRouteId, journeyRefPrefix, startTimeFrom, startTimeTo, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.listGtfsRidesListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of gtfs routes.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [lineRefs]   Filter by line ref. Comma-separated list of values.
         * @param {string} [operatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [routeShortName] Line number.  Filter by route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [routeLongNameContains]   Filter by route long name. Only return items which contain given string.
         * @param {string} [routeMkt]   Filter by route mkt. Only return items which exactly match given string.
         * @param {string} [routeDirection]   Filter by route direction. Only return items which exactly match given string.
         * @param {string} [routeAlternative]   Filter by route alternative. Only return items which exactly match given string.
         * @param {string} [agencyName]   Filter by agency name. Only return items which exactly match given string.
         * @param {string} [routeType]   Filter by route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsRoutesListGet(limit?: number, offset?: number, getCount?: boolean, dateFrom?: string, dateTo?: string, lineRefs?: string, operatorRefs?: string, routeShortName?: string, routeLongNameContains?: string, routeMkt?: string, routeDirection?: string, routeAlternative?: string, agencyName?: string, routeType?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtfsRoutePydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGtfsRoutesListGet(limit, offset, getCount, dateFrom, dateTo, lineRefs, operatorRefs, routeShortName, routeLongNameContains, routeMkt, routeDirection, routeAlternative, agencyName, routeType, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.listGtfsRoutesListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of gtfs stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [code]   Filter by code. Only return items which exactly match given string.
         * @param {string} [city]   Filter by city. Only return items which exactly match given string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsStopsListGet(limit?: number, offset?: number, getCount?: boolean, dateFrom?: string, dateTo?: string, code?: number, city?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtfsStopPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGtfsStopsListGet(limit, offset, getCount, dateFrom, dateTo, code, city, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GtfsApi.listGtfsStopsListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GtfsApi - factory interface
 * @export
 */
export const GtfsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GtfsApiFp(configuration)
    return {
        /**
         * Return a single gtfs ride stop based on id
         * @summary Get 
         * @param {number} id gtfs ride stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsRideStopsGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GtfsRideStopPydanticModel> {
            return localVarFp.getGtfsRideStopsGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single gtfs ride based on id
         * @summary Get 
         * @param {number} id gtfs ride id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsRidesGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GtfsRidePydanticModel> {
            return localVarFp.getGtfsRidesGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single gtfs route based on id
         * @summary Get 
         * @param {number} id gtfs route id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsRoutesGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GtfsRoutePydanticModel> {
            return localVarFp.getGtfsRoutesGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single gtfs stop based on id
         * @summary Get 
         * @param {number} id gtfs stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGtfsStopsGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<GtfsStopPydanticModel> {
            return localVarFp.getGtfsStopsGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of gtfs agencies.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsAgenciesListGet(limit?: number, offset?: number, dateFrom?: string, dateTo?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GtfsAgencyPydanticModel>> {
            return localVarFp.listGtfsAgenciesListGet(limit, offset, dateFrom, dateTo, options).then((request) => request(axios, basePath));
        },
        /**
         * List of gtfs ride stops.  Due to large number of items in the table, you must filter the results by at least one of the following:  1. gtfs_ride_ids - containing a single gtfs ride id. 2. arrival_time_from and arrival_time_to - containing a time range.  Additional filters can be applied in addition to one of the above options to narrow down the results.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [arrivalTimeFrom]   Filter by arrival time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [arrivalTimeTo]   Filter by arrival time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsStopIds]   Filter by gtfs stop id. Comma-separated list of values.
         * @param {string} [gtfsRideIds]   Filter by gtfs ride id. Comma-separated list of values.
         * @param {number} [gtfsRideGtfsRouteId]   Filter by related gtfs ride\&#39;s gtfs route id. Only return items which exactly match given string.
         * @param {string} [gtfsRideJourneyRefPrefix]   Filter by related gtfs ride\&#39;s journey ref prefix. Only return items which start with given string.
         * @param {string} [gtfsRideStartTimeFrom]   Filter by related gtfs ride\&#39;s start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRideStartTimeTo]   Filter by related gtfs ride\&#39;s start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsStopDateFrom]   Filter by related gtfs stop\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsStopDateTo]   Filter by related gtfs stop\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [gtfsStopCode]   Filter by related gtfs stop\&#39;s code. Only return items which exactly match given string.
         * @param {string} [gtfsStopCity]   Filter by related gtfs stop\&#39;s city. Only return items which exactly match given string.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsRideStopsListGet(limit?: number, offset?: number, getCount?: boolean, arrivalTimeFrom?: string, arrivalTimeTo?: string, gtfsStopIds?: string, gtfsRideIds?: string, gtfsRideGtfsRouteId?: number, gtfsRideJourneyRefPrefix?: string, gtfsRideStartTimeFrom?: string, gtfsRideStartTimeTo?: string, gtfsStopDateFrom?: string, gtfsStopDateTo?: string, gtfsStopCode?: number, gtfsStopCity?: string, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GtfsRideStopWithRelatedPydanticModel>> {
            return localVarFp.listGtfsRideStopsListGet(limit, offset, getCount, arrivalTimeFrom, arrivalTimeTo, gtfsStopIds, gtfsRideIds, gtfsRideGtfsRouteId, gtfsRideJourneyRefPrefix, gtfsRideStartTimeFrom, gtfsRideStartTimeTo, gtfsStopDateFrom, gtfsStopDateTo, gtfsStopCode, gtfsStopCity, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List of gtfs rides.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {number} [gtfsRouteId]   Filter by gtfs route id. Only return items which exactly match given string.
         * @param {string} [journeyRefPrefix]   Filter by journey ref prefix. Only return items which start with given string.
         * @param {string} [startTimeFrom]   Filter by start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [startTimeTo]   Filter by start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsRidesListGet(limit?: number, offset?: number, getCount?: boolean, gtfsRouteId?: number, journeyRefPrefix?: string, startTimeFrom?: string, startTimeTo?: string, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GtfsRideWithRelatedPydanticModel>> {
            return localVarFp.listGtfsRidesListGet(limit, offset, getCount, gtfsRouteId, journeyRefPrefix, startTimeFrom, startTimeTo, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List of gtfs routes.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [lineRefs]   Filter by line ref. Comma-separated list of values.
         * @param {string} [operatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [routeShortName] Line number.  Filter by route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [routeLongNameContains]   Filter by route long name. Only return items which contain given string.
         * @param {string} [routeMkt]   Filter by route mkt. Only return items which exactly match given string.
         * @param {string} [routeDirection]   Filter by route direction. Only return items which exactly match given string.
         * @param {string} [routeAlternative]   Filter by route alternative. Only return items which exactly match given string.
         * @param {string} [agencyName]   Filter by agency name. Only return items which exactly match given string.
         * @param {string} [routeType]   Filter by route type. Only return items which exactly match given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsRoutesListGet(limit?: number, offset?: number, getCount?: boolean, dateFrom?: string, dateTo?: string, lineRefs?: string, operatorRefs?: string, routeShortName?: string, routeLongNameContains?: string, routeMkt?: string, routeDirection?: string, routeAlternative?: string, agencyName?: string, routeType?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GtfsRoutePydanticModel>> {
            return localVarFp.listGtfsRoutesListGet(limit, offset, getCount, dateFrom, dateTo, lineRefs, operatorRefs, routeShortName, routeLongNameContains, routeMkt, routeDirection, routeAlternative, agencyName, routeType, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List of gtfs stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [code]   Filter by code. Only return items which exactly match given string.
         * @param {string} [city]   Filter by city. Only return items which exactly match given string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsStopsListGet(limit?: number, offset?: number, getCount?: boolean, dateFrom?: string, dateTo?: string, code?: number, city?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GtfsStopPydanticModel>> {
            return localVarFp.listGtfsStopsListGet(limit, offset, getCount, dateFrom, dateTo, code, city, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GtfsApi - object-oriented interface
 * @export
 * @class GtfsApi
 * @extends {BaseAPI}
 */
export class GtfsApi extends BaseAPI {
    /**
     * Return a single gtfs ride stop based on id
     * @summary Get 
     * @param {number} id gtfs ride stop id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public getGtfsRideStopsGetGet(id: number, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).getGtfsRideStopsGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a single gtfs ride based on id
     * @summary Get 
     * @param {number} id gtfs ride id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public getGtfsRidesGetGet(id: number, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).getGtfsRidesGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a single gtfs route based on id
     * @summary Get 
     * @param {number} id gtfs route id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public getGtfsRoutesGetGet(id: number, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).getGtfsRoutesGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a single gtfs stop based on id
     * @summary Get 
     * @param {number} id gtfs stop id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public getGtfsStopsGetGet(id: number, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).getGtfsStopsGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of gtfs agencies.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public listGtfsAgenciesListGet(limit?: number, offset?: number, dateFrom?: string, dateTo?: string, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).listGtfsAgenciesListGet(limit, offset, dateFrom, dateTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of gtfs ride stops.  Due to large number of items in the table, you must filter the results by at least one of the following:  1. gtfs_ride_ids - containing a single gtfs ride id. 2. arrival_time_from and arrival_time_to - containing a time range.  Additional filters can be applied in addition to one of the above options to narrow down the results.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [arrivalTimeFrom]   Filter by arrival time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [arrivalTimeTo]   Filter by arrival time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [gtfsStopIds]   Filter by gtfs stop id. Comma-separated list of values.
     * @param {string} [gtfsRideIds]   Filter by gtfs ride id. Comma-separated list of values.
     * @param {number} [gtfsRideGtfsRouteId]   Filter by related gtfs ride\&#39;s gtfs route id. Only return items which exactly match given string.
     * @param {string} [gtfsRideJourneyRefPrefix]   Filter by related gtfs ride\&#39;s journey ref prefix. Only return items which start with given string.
     * @param {string} [gtfsRideStartTimeFrom]   Filter by related gtfs ride\&#39;s start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [gtfsRideStartTimeTo]   Filter by related gtfs ride\&#39;s start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [gtfsStopDateFrom]   Filter by related gtfs stop\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [gtfsStopDateTo]   Filter by related gtfs stop\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {number} [gtfsStopCode]   Filter by related gtfs stop\&#39;s code. Only return items which exactly match given string.
     * @param {string} [gtfsStopCity]   Filter by related gtfs stop\&#39;s city. Only return items which exactly match given string.
     * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
     * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
     * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
     * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
     * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
     * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public listGtfsRideStopsListGet(limit?: number, offset?: number, getCount?: boolean, arrivalTimeFrom?: string, arrivalTimeTo?: string, gtfsStopIds?: string, gtfsRideIds?: string, gtfsRideGtfsRouteId?: number, gtfsRideJourneyRefPrefix?: string, gtfsRideStartTimeFrom?: string, gtfsRideStartTimeTo?: string, gtfsStopDateFrom?: string, gtfsStopDateTo?: string, gtfsStopCode?: number, gtfsStopCity?: string, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).listGtfsRideStopsListGet(limit, offset, getCount, arrivalTimeFrom, arrivalTimeTo, gtfsStopIds, gtfsRideIds, gtfsRideGtfsRouteId, gtfsRideJourneyRefPrefix, gtfsRideStartTimeFrom, gtfsRideStartTimeTo, gtfsStopDateFrom, gtfsStopDateTo, gtfsStopCode, gtfsStopCity, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of gtfs rides.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {number} [gtfsRouteId]   Filter by gtfs route id. Only return items which exactly match given string.
     * @param {string} [journeyRefPrefix]   Filter by journey ref prefix. Only return items which start with given string.
     * @param {string} [startTimeFrom]   Filter by start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [startTimeTo]   Filter by start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
     * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
     * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
     * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
     * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
     * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public listGtfsRidesListGet(limit?: number, offset?: number, getCount?: boolean, gtfsRouteId?: number, journeyRefPrefix?: string, startTimeFrom?: string, startTimeTo?: string, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).listGtfsRidesListGet(limit, offset, getCount, gtfsRouteId, journeyRefPrefix, startTimeFrom, startTimeTo, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of gtfs routes.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [lineRefs]   Filter by line ref. Comma-separated list of values.
     * @param {string} [operatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by operator ref. Comma-separated list of values.  Example: 3 for Eged
     * @param {string} [routeShortName] Line number.  Filter by route short name. Only return items which exactly match given string.  Example: 480
     * @param {string} [routeLongNameContains]   Filter by route long name. Only return items which contain given string.
     * @param {string} [routeMkt]   Filter by route mkt. Only return items which exactly match given string.
     * @param {string} [routeDirection]   Filter by route direction. Only return items which exactly match given string.
     * @param {string} [routeAlternative]   Filter by route alternative. Only return items which exactly match given string.
     * @param {string} [agencyName]   Filter by agency name. Only return items which exactly match given string.
     * @param {string} [routeType]   Filter by route type. Only return items which exactly match given string.
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public listGtfsRoutesListGet(limit?: number, offset?: number, getCount?: boolean, dateFrom?: string, dateTo?: string, lineRefs?: string, operatorRefs?: string, routeShortName?: string, routeLongNameContains?: string, routeMkt?: string, routeDirection?: string, routeAlternative?: string, agencyName?: string, routeType?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).listGtfsRoutesListGet(limit, offset, getCount, dateFrom, dateTo, lineRefs, operatorRefs, routeShortName, routeLongNameContains, routeMkt, routeDirection, routeAlternative, agencyName, routeType, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of gtfs stops.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [dateFrom]   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [dateTo]   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {number} [code]   Filter by code. Only return items which exactly match given string.
     * @param {string} [city]   Filter by city. Only return items which exactly match given string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GtfsApi
     */
    public listGtfsStopsListGet(limit?: number, offset?: number, getCount?: boolean, dateFrom?: string, dateTo?: string, code?: number, city?: string, options?: RawAxiosRequestConfig) {
        return GtfsApiFp(this.configuration).listGtfsStopsListGet(limit, offset, getCount, dateFrom, dateTo, code, city, options).then((request) => request(this.axios, this.basePath));
    }
}

