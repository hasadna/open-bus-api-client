name: Generate Client API

on:
  workflow_dispatch:
    inputs:
      semver-fragment:
        description: "Semver bump for package.json"
        required: false
        type: choice
        options:
          - none # Generate client, Skip publish
          - skip # No version bump, but still publish
          - patch # For bug fixes
          - minor # For new features that are backward compatible
          - major # For changes that break backward compatibility
        default: none

  repository_dispatch:
    types: [generate-client]

permissions:
  contents: write
  id-token: write

jobs:
  generate-client:
    name: Generate Client API
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Determine semver fragment
        id: semver
        run: |
          FRAGMENT="${{ github.event.inputs.semver-fragment }}"
          if [ -z "$FRAGMENT" ]; then
            FRAGMENT="${{ github.event.client_payload.semver-fragment }}"
          fi

          if [[ "$FRAGMENT" != "none" && "$FRAGMENT" != "skip" && "$FRAGMENT" != "patch" && "$FRAGMENT" != "minor" && "$FRAGMENT" != "major" ]]; then
            echo "Invalid semver fragment: $FRAGMENT"
            exit 1
          fi

          echo "fragment=$FRAGMENT" >> "$GITHUB_OUTPUT"

      - name: Get current version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        if: steps.semver.outputs.fragment != 'skip' && steps.semver.outputs.fragment != 'none'
        id: version
        uses: christian-draeger/increment-semantic-version@1.2.3
        with:
          current-version: ${{ steps.get-version.outputs.version }}
          version-fragment: ${{ steps.semver.outputs.fragment }}

      - name: Write new version to package.json
        run: |
          NEW_VERSION=${{ steps.version.outputs.next-version }}
          node -e "let p=require('./package.json'); p.version='${NEW_VERSION}'; require('fs').writeFileSync('./package.json', JSON.stringify(p, null, 2) + '\n')"

      - name: Install root dependencies
        run: npm install

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Clone open-bus-stride-api and Download JSON
        run: |
          git clone https://github.com/hasadna/open-bus-stride-api.git ./open-bus-stride-api
          git clone https://github.com/hasadna/open-bus-stride-db.git ./open-bus-stride-db

          cd open-bus-stride-api
          python -m venv venv
          source venv/bin/activate
          pip install -r open-bus-stride-api/requirements.txt
          pip install -r ../open-bus-stride-db/requirements.txt

          uvicorn open_bus_stride_api.main:app --host 0.0.0.0 --port 8000 &

          sleep 15

          curl -L http://localhost:8000/openapi.json -o openapi.json

          if [ ! -f openapi.json ]; then
            echo "Failed to download OpenAPI JSON"
            exit 1
          fi

      - name: Generate client
        run: npm run generate

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-client

      - name: Publish to npm
        run: |
          if [ "${{ steps.semver.outputs.fragment }}" = "none" ]; then
            echo "Skipping npm publish as semver fragment is 'none'"
            exit 0
          fi
          npm run publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit and push regenerated client
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: bump version to ${{ steps.increment.outputs.next-version }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push Git tag
        if: steps.semver-fragment.outputs.fragment != 'skip'
        run: |
          TAG="v${{ steps.version.outputs.next-version }}"
          git tag "$TAG"
          git push origin "$TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
