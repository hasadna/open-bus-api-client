/* tslint:disable */
/* eslint-disable */
/**
 * Open Bus Stride API
 * ### Follow planned and real-time bus statistics ðŸšŒ  Welcome to The Public Knowledge Workshop\'s Stride project. We provide usable and accurate data about the Israeli public transportation system.  For background on the project and some more detailed documentation and usage guides, see [STRIDE.md](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE.md).  Looking for a specific use-case?  * Take a look at the **user cases** APIs below. * Try one of our existing [jupyter notebooks](https://github.com/hasadna/open-bus-stride-client/blob/main/README.md#using-the-interactive-jupyter-notebooks). * Don\'t see your use-case covered here? Please [open us a ticket](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhasadna%2Fopen-bus%2Fissues%2Fnew)!  Queries are by default limited to 100 results per query, this limit can be increased up to 500,000 results. Please try to set appropriate query parameters to limit the results to reduce load on our DB. If you do need to get large number of results (up to 500,000) it\'s recommended to use one of these methods:  1. Use HTTP streaming and JSON streaming decoder, this method is most efficient and provide accurate results.    Our [Stride Python Client iterate method](https://github.com/hasadna/open-bus-stride-client#usage) uses this method. 2. Use combination of limit / offset parameters to get results by page. This method may be less accurate because    it depends on data remaining unchanged between requests.  For more advanced usage-  * Use **gtfs** for data about the planned lines timetables.  * Use **siri** for data about lines real-time * See [Open Bus Stride Data Model](https://github.com/hasadna/open-bus-stride-db/blob/main/DATA_MODEL.md) for description of field and table names. * See [Open Bus Stride ETL Processes](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE_ETL_PROCESSES.md) for description of the ETL processes which fetch and aggregate the data. * See [MOT Developer Information](https://www.gov.il/BlobFolder/generalpage/gtfs_general_transit_feed_specifications/he/GTFS%20-%20Developer%20Information.pdf) for description of the source fields as published by the Israel Ministry of Transportation. 
 *
 * The version of the OpenAPI document: 6909b3db7b8bfa5ac3f3c4aeb3de80d2a2c75810
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComplaintsSendPostRequestUserData } from './ComplaintsSendPostRequestUserData';
import {
    ComplaintsSendPostRequestUserDataFromJSON,
    ComplaintsSendPostRequestUserDataFromJSONTyped,
    ComplaintsSendPostRequestUserDataToJSON,
    ComplaintsSendPostRequestUserDataToJSONTyped,
} from './ComplaintsSendPostRequestUserData';

/**
 * 
 * @export
 * @interface ComplaintsSendPostRequest
 */
export interface ComplaintsSendPostRequest {
    /**
     * Enable debug mode to return XML without sending
     * @type {boolean}
     * @memberof ComplaintsSendPostRequest
     */
    debug?: boolean;
    /**
     * 
     * @type {ComplaintsSendPostRequestUserData}
     * @memberof ComplaintsSendPostRequest
     */
    userData?: ComplaintsSendPostRequestUserData;
    /**
     * 
     * @type {object}
     * @memberof ComplaintsSendPostRequest
     */
    databusData?: object;
}

/**
 * Check if a given object implements the ComplaintsSendPostRequest interface.
 */
export function instanceOfComplaintsSendPostRequest(value: object): value is ComplaintsSendPostRequest {
    return true;
}

export function ComplaintsSendPostRequestFromJSON(json: any): ComplaintsSendPostRequest {
    return ComplaintsSendPostRequestFromJSONTyped(json, false);
}

export function ComplaintsSendPostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplaintsSendPostRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'debug': json['debug'] == null ? undefined : json['debug'],
        'userData': json['userData'] == null ? undefined : ComplaintsSendPostRequestUserDataFromJSON(json['userData']),
        'databusData': json['databusData'] == null ? undefined : json['databusData'],
    };
}

export function ComplaintsSendPostRequestToJSON(json: any): ComplaintsSendPostRequest {
    return ComplaintsSendPostRequestToJSONTyped(json, false);
}

export function ComplaintsSendPostRequestToJSONTyped(value?: ComplaintsSendPostRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'debug': value['debug'],
        'userData': ComplaintsSendPostRequestUserDataToJSON(value['userData']),
        'databusData': value['databusData'],
    };
}

