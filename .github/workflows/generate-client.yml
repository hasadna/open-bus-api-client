name: Generate Client API

on:
  workflow_dispatch:
    inputs:
      semver-fragment:
        description: "Semver bump for package.json"
        required: false
        type: choice
        options:
          - test # Test Generate client, Skip publish
          - skip # No version bump, but still publish
          - patch # For bug fixes
          - minor # For new features that are backward compatible
          - major # For changes that break backward compatibility

permissions:
  contents: write
  id-token: write

jobs:
  generate-client:
    name: Generate Client API
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: latest
          registry-url: "https://npm.pkg.github.com"
          scope: "@hasadna"

      - name: Set up Node.js environment
        id: settings
        run: |
          FRAGMENT_TYPE="${{ github.event.inputs.semver-fragment }}"
          if [[ "$FRAGMENT_TYPE" != "test" && "$FRAGMENT_TYPE" != "skip" && "$FRAGMENT_TYPE" != "patch" && "$FRAGMENT_TYPE" != "minor" && "$FRAGMENT_TYPE" != "major" ]]; then
            echo "Invalid semver fragment: $FRAGMENT_TYPE"
            exit 1
          fi

          echo "Final semver fragment: $FRAGMENT_TYPE"
          echo "fragment=$FRAGMENT_TYPE" >> "$GITHUB_OUTPUT"

      - name: Get current version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if [ -z "$VERSION" ]; then
            echo "Failed to get version from package.json"
            exit 1
          fi

          echo "Current version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        if: steps.settings.outputs.fragment != 'skip'
        id: version
        uses: christian-draeger/increment-semantic-version@1.2.3
        with:
          current-version: ${{ steps.get-version.outputs.version }}
          version-fragment: ${{ steps.settings.outputs.fragment == 'test' && 'minor' || steps.settings.outputs.fragment }}

      - name: Set new version in package.json
        if: steps.settings.outputs.fragment != 'skip'
        run: |
          NEW_VERSION=${{ steps.version.outputs.next-version }}
          node -e "let p=require('./package.json'); p.version='${NEW_VERSION}'; require('fs').writeFileSync('./package.json', JSON.stringify(p, null, 2) + '\n')"

      - name: Install root dependencies
        run: npm install

      - name: Download Json Schem
        run: |
          npm run download
          if [ ! -f openapi.json ]; then
            echo "OpenAPI JSON not found after download"
            exit 1
          fi

      - name: Generate client
        run: npm run generate

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-client
          path: client

      - name: Publish to npm
        run: npm run publish
        env:
          DRY_RUN: ${{ steps.settings.outputs.fragment == 'test' }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit and push regenerated client
        if: steps.settings.outputs.fragment != 'skip' && steps.settings.outputs.fragment != 'test'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: bump version to ${{ steps.version.outputs.next-version }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push Git tag
        if: steps.settings.outputs.fragment != 'skip' && steps.settings.outputs.fragment != 'test'
        run: |
          TAG="v${{ steps.version.outputs.next-version }}"
          git tag "$TAG"
          git push origin "$TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
