/* tslint:disable */
/* eslint-disable */
/**
 * Open Bus Stride API
 * ### Follow planned and real-time bus statistics ðŸšŒ  Welcome to The Public Knowledge Workshop\'s Stride project. We provide usable and accurate data about the Israeli public transportation system.  For background on the project and some more detailed documentation and usage guides, see [STRIDE.md](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE.md).  Looking for a specific use-case?  * Take a look at the **user cases** APIs below. * Try one of our existing [jupyter notebooks](https://github.com/hasadna/open-bus-stride-client/blob/main/README.md#using-the-interactive-jupyter-notebooks). * Don\'t see your use-case covered here? Please [open us a ticket](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhasadna%2Fopen-bus%2Fissues%2Fnew)!  Queries are by default limited to 100 results per query, this limit can be increased up to 500,000 results. Please try to set appropriate query parameters to limit the results to reduce load on our DB. If you do need to get large number of results (up to 500,000) it\'s recommended to use one of these methods:  1. Use HTTP streaming and JSON streaming decoder, this method is most efficient and provide accurate results.    Our [Stride Python Client iterate method](https://github.com/hasadna/open-bus-stride-client#usage) uses this method. 2. Use combination of limit / offset parameters to get results by page. This method may be less accurate because    it depends on data remaining unchanged between requests.  For more advanced usage-  * Use **gtfs** for data about the planned lines timetables.  * Use **siri** for data about lines real-time * See [Open Bus Stride Data Model](https://github.com/hasadna/open-bus-stride-db/blob/main/DATA_MODEL.md) for description of field and table names. * See [Open Bus Stride ETL Processes](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE_ETL_PROCESSES.md) for description of the ETL processes which fetch and aggregate the data. * See [MOT Developer Information](https://www.gov.il/BlobFolder/generalpage/gtfs_general_transit_feed_specifications/he/GTFS%20-%20Developer%20Information.pdf) for description of the source fields as published by the Israel Ministry of Transportation. 
 *
 * The version of the OpenAPI document: local-development
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { SiriRidePydanticModel } from '../models';
// @ts-ignore
import type { SiriRideStopPydanticModel } from '../models';
// @ts-ignore
import type { SiriRideStopWithRelatedPydanticModel } from '../models';
// @ts-ignore
import type { SiriRideWithRelatedPydanticModel } from '../models';
// @ts-ignore
import type { SiriRoutePydanticModel } from '../models';
// @ts-ignore
import type { SiriSnapshotPydanticModel } from '../models';
// @ts-ignore
import type { SiriStopPydanticModel } from '../models';
// @ts-ignore
import type { SiriVehicleLocationPydanticModel } from '../models';
// @ts-ignore
import type { SiriVehicleLocationWithRelatedPydanticModel } from '../models';
/**
 * SiriApi - axios parameter creator
 * @export
 */
export const SiriApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a single siri ride stop based on id
         * @summary Get 
         * @param {number} id siri ride stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriRideStopsGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSiriRideStopsGetGet', 'id', id)
            const localVarPath = `/siri_ride_stops/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single siri ride based on id
         * @summary Get 
         * @param {number} id siri ride id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriRidesGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSiriRidesGetGet', 'id', id)
            const localVarPath = `/siri_rides/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single siri route based on id
         * @summary Get 
         * @param {number} id siri route id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriRoutesGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSiriRoutesGetGet', 'id', id)
            const localVarPath = `/siri_routes/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single siri snapshot based on id
         * @summary Get 
         * @param {number} id siri snapshot id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriSnapshotsGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSiriSnapshotsGetGet', 'id', id)
            const localVarPath = `/siri_snapshots/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single siri stop based on id
         * @summary Get 
         * @param {number} id siri stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriStopsGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSiriStopsGetGet', 'id', id)
            const localVarPath = `/siri_stops/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a single siri vehicle location based on id
         * @summary Get 
         * @param {number} id siri vehicle location id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriVehicleLocationsGetGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSiriVehicleLocationsGetGet', 'id', id)
            const localVarPath = `/siri_vehicle_locations/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of siri ride stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [siriStopIds]   Filter by siri stop id. Comma-separated list of values.
         * @param {string} [siriRideIds]   Filter by siri ride id. Comma-separated list of values.
         * @param {number} [siriVehicleLocationLonGreaterOrEqual]   Filter by siri vehicle location lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [siriVehicleLocationLonLowerOrEqual]   Filter by siri vehicle location lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {number} [siriVehicleLocationLatGreaterOrEqual]   Filter by siri vehicle location lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [siriVehicleLocationLatLowerOrEqual]   Filter by siri vehicle location lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {string} [siriVehicleLocationRecordedAtTimeFrom]   Filter by siri vehicle location recorded at time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriVehicleLocationRecordedAtTimeTo]   Filter by siri vehicle location recorded at time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRideScheduledStartTimeFrom]   Filter by siri ride scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRideScheduledStartTimeTo]   Filter by siri ride scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {number} [gtfsStopLatGreaterOrEqual]   Filter by gtfs stop lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [gtfsStopLatLowerOrEqual]   Filter by gtfs stop lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {number} [gtfsStopLonGreaterOrEqual]   Filter by gtfs stop lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [gtfsStopLonLowerOrEqual]   Filter by gtfs stop lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {string} [gtfsDateFrom] filter all gtfs related records on this date  Filter by gtfs date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsDateTo] filter all gtfs related records on this date  Filter by gtfs date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriRideStopsListGet: async (limit?: number, offset?: number, getCount?: boolean, siriStopIds?: string, siriRideIds?: string, siriVehicleLocationLonGreaterOrEqual?: number, siriVehicleLocationLonLowerOrEqual?: number, siriVehicleLocationLatGreaterOrEqual?: number, siriVehicleLocationLatLowerOrEqual?: number, siriVehicleLocationRecordedAtTimeFrom?: string, siriVehicleLocationRecordedAtTimeTo?: string, siriRideScheduledStartTimeFrom?: string, siriRideScheduledStartTimeTo?: string, gtfsStopLatGreaterOrEqual?: number, gtfsStopLatLowerOrEqual?: number, gtfsStopLonGreaterOrEqual?: number, gtfsStopLonLowerOrEqual?: number, gtfsDateFrom?: string, gtfsDateTo?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/siri_ride_stops/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (siriStopIds !== undefined) {
                localVarQueryParameter['siri_stop_ids'] = siriStopIds;
            }

            if (siriRideIds !== undefined) {
                localVarQueryParameter['siri_ride_ids'] = siriRideIds;
            }

            if (siriVehicleLocationLonGreaterOrEqual !== undefined) {
                localVarQueryParameter['siri_vehicle_location__lon__greater_or_equal'] = siriVehicleLocationLonGreaterOrEqual;
            }

            if (siriVehicleLocationLonLowerOrEqual !== undefined) {
                localVarQueryParameter['siri_vehicle_location__lon__lower_or_equal'] = siriVehicleLocationLonLowerOrEqual;
            }

            if (siriVehicleLocationLatGreaterOrEqual !== undefined) {
                localVarQueryParameter['siri_vehicle_location__lat__greater_or_equal'] = siriVehicleLocationLatGreaterOrEqual;
            }

            if (siriVehicleLocationLatLowerOrEqual !== undefined) {
                localVarQueryParameter['siri_vehicle_location__lat__lower_or_equal'] = siriVehicleLocationLatLowerOrEqual;
            }

            if (siriVehicleLocationRecordedAtTimeFrom !== undefined) {
                localVarQueryParameter['siri_vehicle_location__recorded_at_time_from'] = (siriVehicleLocationRecordedAtTimeFrom as any instanceof Date) ?
                    (siriVehicleLocationRecordedAtTimeFrom as any).toISOString() :
                    siriVehicleLocationRecordedAtTimeFrom;
            }

            if (siriVehicleLocationRecordedAtTimeTo !== undefined) {
                localVarQueryParameter['siri_vehicle_location__recorded_at_time_to'] = (siriVehicleLocationRecordedAtTimeTo as any instanceof Date) ?
                    (siriVehicleLocationRecordedAtTimeTo as any).toISOString() :
                    siriVehicleLocationRecordedAtTimeTo;
            }

            if (siriRideScheduledStartTimeFrom !== undefined) {
                localVarQueryParameter['siri_ride__scheduled_start_time_from'] = (siriRideScheduledStartTimeFrom as any instanceof Date) ?
                    (siriRideScheduledStartTimeFrom as any).toISOString() :
                    siriRideScheduledStartTimeFrom;
            }

            if (siriRideScheduledStartTimeTo !== undefined) {
                localVarQueryParameter['siri_ride__scheduled_start_time_to'] = (siriRideScheduledStartTimeTo as any instanceof Date) ?
                    (siriRideScheduledStartTimeTo as any).toISOString() :
                    siriRideScheduledStartTimeTo;
            }

            if (gtfsStopLatGreaterOrEqual !== undefined) {
                localVarQueryParameter['gtfs_stop__lat__greater_or_equal'] = gtfsStopLatGreaterOrEqual;
            }

            if (gtfsStopLatLowerOrEqual !== undefined) {
                localVarQueryParameter['gtfs_stop__lat__lower_or_equal'] = gtfsStopLatLowerOrEqual;
            }

            if (gtfsStopLonGreaterOrEqual !== undefined) {
                localVarQueryParameter['gtfs_stop__lon__greater_or_equal'] = gtfsStopLonGreaterOrEqual;
            }

            if (gtfsStopLonLowerOrEqual !== undefined) {
                localVarQueryParameter['gtfs_stop__lon__lower_or_equal'] = gtfsStopLonLowerOrEqual;
            }

            if (gtfsDateFrom !== undefined) {
                localVarQueryParameter['gtfs_date_from'] = (gtfsDateFrom as any instanceof Date) ?
                    (gtfsDateFrom as any).toISOString().substring(0,10) :
                    gtfsDateFrom;
            }

            if (gtfsDateTo !== undefined) {
                localVarQueryParameter['gtfs_date_to'] = (gtfsDateTo as any instanceof Date) ?
                    (gtfsDateTo as any).toISOString().substring(0,10) :
                    gtfsDateTo;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of siri rides.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {number} [gtfsRideGtfsRouteId]   Filter by related gtfs ride\&#39;s gtfs route id. Only return items which exactly match given string.
         * @param {string} [gtfsRideJourneyRefPrefix]   Filter by related gtfs ride\&#39;s journey ref prefix. Only return items which start with given string.
         * @param {string} [gtfsRideStartTimeFrom]   Filter by related gtfs ride\&#39;s start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRideStartTimeTo]   Filter by related gtfs ride\&#39;s start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRouteIds]   Filter by siri route ids. Comma-separated list of values.
         * @param {string} [siriRouteLineRefs]   Filter by siri route line refs. Comma-separated list of values.
         * @param {string} [siriRouteOperatorRefs]   Filter by siri route operator refs. Comma-separated list of values.
         * @param {string} [journeyRefPrefix]   Filter by journey ref prefix. Only return items which start with given string.
         * @param {string} [journeyRefs]   Filter by journey ref. Comma-separated list of values.
         * @param {string} [vehicleRefs]   Filter by vehicle ref. Comma-separated list of values.
         * @param {string} [scheduledStartTimeFrom]   Filter by scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [scheduledStartTimeTo]   Filter by scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriRidesListGet: async (limit?: number, offset?: number, getCount?: boolean, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, gtfsRideGtfsRouteId?: number, gtfsRideJourneyRefPrefix?: string, gtfsRideStartTimeFrom?: string, gtfsRideStartTimeTo?: string, siriRouteIds?: string, siriRouteLineRefs?: string, siriRouteOperatorRefs?: string, journeyRefPrefix?: string, journeyRefs?: string, vehicleRefs?: string, scheduledStartTimeFrom?: string, scheduledStartTimeTo?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/siri_rides/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (gtfsRouteDateFrom !== undefined) {
                localVarQueryParameter['gtfs_route__date_from'] = (gtfsRouteDateFrom as any instanceof Date) ?
                    (gtfsRouteDateFrom as any).toISOString().substring(0,10) :
                    gtfsRouteDateFrom;
            }

            if (gtfsRouteDateTo !== undefined) {
                localVarQueryParameter['gtfs_route__date_to'] = (gtfsRouteDateTo as any instanceof Date) ?
                    (gtfsRouteDateTo as any).toISOString().substring(0,10) :
                    gtfsRouteDateTo;
            }

            if (gtfsRouteLineRefs !== undefined) {
                localVarQueryParameter['gtfs_route__line_refs'] = gtfsRouteLineRefs;
            }

            if (gtfsRouteOperatorRefs !== undefined) {
                localVarQueryParameter['gtfs_route__operator_refs'] = gtfsRouteOperatorRefs;
            }

            if (gtfsRouteRouteShortName !== undefined) {
                localVarQueryParameter['gtfs_route__route_short_name'] = gtfsRouteRouteShortName;
            }

            if (gtfsRouteRouteLongNameContains !== undefined) {
                localVarQueryParameter['gtfs_route__route_long_name_contains'] = gtfsRouteRouteLongNameContains;
            }

            if (gtfsRouteRouteMkt !== undefined) {
                localVarQueryParameter['gtfs_route__route_mkt'] = gtfsRouteRouteMkt;
            }

            if (gtfsRouteRouteDirection !== undefined) {
                localVarQueryParameter['gtfs_route__route_direction'] = gtfsRouteRouteDirection;
            }

            if (gtfsRouteRouteAlternative !== undefined) {
                localVarQueryParameter['gtfs_route__route_alternative'] = gtfsRouteRouteAlternative;
            }

            if (gtfsRouteAgencyName !== undefined) {
                localVarQueryParameter['gtfs_route__agency_name'] = gtfsRouteAgencyName;
            }

            if (gtfsRouteRouteType !== undefined) {
                localVarQueryParameter['gtfs_route__route_type'] = gtfsRouteRouteType;
            }

            if (gtfsRideGtfsRouteId !== undefined) {
                localVarQueryParameter['gtfs_ride__gtfs_route_id'] = gtfsRideGtfsRouteId;
            }

            if (gtfsRideJourneyRefPrefix !== undefined) {
                localVarQueryParameter['gtfs_ride__journey_ref_prefix'] = gtfsRideJourneyRefPrefix;
            }

            if (gtfsRideStartTimeFrom !== undefined) {
                localVarQueryParameter['gtfs_ride__start_time_from'] = (gtfsRideStartTimeFrom as any instanceof Date) ?
                    (gtfsRideStartTimeFrom as any).toISOString() :
                    gtfsRideStartTimeFrom;
            }

            if (gtfsRideStartTimeTo !== undefined) {
                localVarQueryParameter['gtfs_ride__start_time_to'] = (gtfsRideStartTimeTo as any instanceof Date) ?
                    (gtfsRideStartTimeTo as any).toISOString() :
                    gtfsRideStartTimeTo;
            }

            if (siriRouteIds !== undefined) {
                localVarQueryParameter['siri_route_ids'] = siriRouteIds;
            }

            if (siriRouteLineRefs !== undefined) {
                localVarQueryParameter['siri_route__line_refs'] = siriRouteLineRefs;
            }

            if (siriRouteOperatorRefs !== undefined) {
                localVarQueryParameter['siri_route__operator_refs'] = siriRouteOperatorRefs;
            }

            if (journeyRefPrefix !== undefined) {
                localVarQueryParameter['journey_ref_prefix'] = journeyRefPrefix;
            }

            if (journeyRefs !== undefined) {
                localVarQueryParameter['journey_refs'] = journeyRefs;
            }

            if (vehicleRefs !== undefined) {
                localVarQueryParameter['vehicle_refs'] = vehicleRefs;
            }

            if (scheduledStartTimeFrom !== undefined) {
                localVarQueryParameter['scheduled_start_time_from'] = (scheduledStartTimeFrom as any instanceof Date) ?
                    (scheduledStartTimeFrom as any).toISOString() :
                    scheduledStartTimeFrom;
            }

            if (scheduledStartTimeTo !== undefined) {
                localVarQueryParameter['scheduled_start_time_to'] = (scheduledStartTimeTo as any instanceof Date) ?
                    (scheduledStartTimeTo as any).toISOString() :
                    scheduledStartTimeTo;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of siri routes.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [lineRefs]   Filter by line ref. Comma-separated list of values.
         * @param {string} [operatorRefs]   Filter by operator ref. Comma-separated list of values.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriRoutesListGet: async (limit?: number, offset?: number, getCount?: boolean, lineRefs?: string, operatorRefs?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/siri_routes/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (lineRefs !== undefined) {
                localVarQueryParameter['line_refs'] = lineRefs;
            }

            if (operatorRefs !== undefined) {
                localVarQueryParameter['operator_refs'] = operatorRefs;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of siri snapshots.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [snapshotIdPrefix]   Filter by snapshot id prefix. Only return items which start with given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriSnapshotsListGet: async (limit?: number, offset?: number, getCount?: boolean, snapshotIdPrefix?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/siri_snapshots/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (snapshotIdPrefix !== undefined) {
                localVarQueryParameter['snapshot_id_prefix'] = snapshotIdPrefix;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of siri stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [codes]   Filter by stop code. Comma-separated list of values.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriStopsListGet: async (limit?: number, offset?: number, getCount?: boolean, codes?: string, orderBy?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/siri_stops/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (codes !== undefined) {
                localVarQueryParameter['codes'] = codes;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of siri vehicle locations.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [siriVehicleLocationIds]   Filter by siri vehicle location id. Comma-separated list of values.
         * @param {string} [siriSnapshotIds]   Filter by siri snapshot id. Comma-separated list of values.
         * @param {string} [siriRideStopIds]   Filter by siri ride stop id. Comma-separated list of values.
         * @param {string} [recordedAtTimeFrom]   Filter by recorded at time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [recordedAtTimeTo]   Filter by recorded at time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {number} [lonGreaterOrEqual]   Filter by lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [lonLowerOrEqual]   Filter by lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {number} [latGreaterOrEqual]   Filter by lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [latLowerOrEqual]   Filter by lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {string} [siriRoutesLineRef]   Filter by siri route line ref. Only return items which exactly match given string.
         * @param {string} [siriRideVehicleRef]   Filter by siri ride vehicle ref. Only return items which exactly match given string.
         * @param {string} [siriRoutesOperatorRef]   Filter by siri route operator ref. Only return items which exactly match given string.
         * @param {string} [siriRidesSchedualedStartTimeFrom]   Filter by siri ride scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRidesSchedualedStartTimeTo]   Filter by siri ride scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRidesIds]   Filter by siri ride id. Comma-separated list of values.
         * @param {string} [siriRoutesIds]   Filter by siri route id. Comma-separated list of values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriVehicleLocationsListGet: async (limit?: number, offset?: number, getCount?: boolean, siriVehicleLocationIds?: string, siriSnapshotIds?: string, siriRideStopIds?: string, recordedAtTimeFrom?: string, recordedAtTimeTo?: string, lonGreaterOrEqual?: number, lonLowerOrEqual?: number, latGreaterOrEqual?: number, latLowerOrEqual?: number, orderBy?: string, siriRoutesLineRef?: string, siriRideVehicleRef?: string, siriRoutesOperatorRef?: string, siriRidesSchedualedStartTimeFrom?: string, siriRidesSchedualedStartTimeTo?: string, siriRidesIds?: string, siriRoutesIds?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/siri_vehicle_locations/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (siriVehicleLocationIds !== undefined) {
                localVarQueryParameter['siri_vehicle_location_ids'] = siriVehicleLocationIds;
            }

            if (siriSnapshotIds !== undefined) {
                localVarQueryParameter['siri_snapshot_ids'] = siriSnapshotIds;
            }

            if (siriRideStopIds !== undefined) {
                localVarQueryParameter['siri_ride_stop_ids'] = siriRideStopIds;
            }

            if (recordedAtTimeFrom !== undefined) {
                localVarQueryParameter['recorded_at_time_from'] = (recordedAtTimeFrom as any instanceof Date) ?
                    (recordedAtTimeFrom as any).toISOString() :
                    recordedAtTimeFrom;
            }

            if (recordedAtTimeTo !== undefined) {
                localVarQueryParameter['recorded_at_time_to'] = (recordedAtTimeTo as any instanceof Date) ?
                    (recordedAtTimeTo as any).toISOString() :
                    recordedAtTimeTo;
            }

            if (lonGreaterOrEqual !== undefined) {
                localVarQueryParameter['lon__greater_or_equal'] = lonGreaterOrEqual;
            }

            if (lonLowerOrEqual !== undefined) {
                localVarQueryParameter['lon__lower_or_equal'] = lonLowerOrEqual;
            }

            if (latGreaterOrEqual !== undefined) {
                localVarQueryParameter['lat__greater_or_equal'] = latGreaterOrEqual;
            }

            if (latLowerOrEqual !== undefined) {
                localVarQueryParameter['lat__lower_or_equal'] = latLowerOrEqual;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (siriRoutesLineRef !== undefined) {
                localVarQueryParameter['siri_routes__line_ref'] = siriRoutesLineRef;
            }

            if (siriRideVehicleRef !== undefined) {
                localVarQueryParameter['siri_ride__vehicle_ref'] = siriRideVehicleRef;
            }

            if (siriRoutesOperatorRef !== undefined) {
                localVarQueryParameter['siri_routes__operator_ref'] = siriRoutesOperatorRef;
            }

            if (siriRidesSchedualedStartTimeFrom !== undefined) {
                localVarQueryParameter['siri_rides__schedualed_start_time_from'] = (siriRidesSchedualedStartTimeFrom as any instanceof Date) ?
                    (siriRidesSchedualedStartTimeFrom as any).toISOString() :
                    siriRidesSchedualedStartTimeFrom;
            }

            if (siriRidesSchedualedStartTimeTo !== undefined) {
                localVarQueryParameter['siri_rides__schedualed_start_time_to'] = (siriRidesSchedualedStartTimeTo as any instanceof Date) ?
                    (siriRidesSchedualedStartTimeTo as any).toISOString() :
                    siriRidesSchedualedStartTimeTo;
            }

            if (siriRidesIds !== undefined) {
                localVarQueryParameter['siri_rides__ids'] = siriRidesIds;
            }

            if (siriRoutesIds !== undefined) {
                localVarQueryParameter['siri_routes__ids'] = siriRoutesIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SiriApi - functional programming interface
 * @export
 */
export const SiriApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SiriApiAxiosParamCreator(configuration)
    return {
        /**
         * Return a single siri ride stop based on id
         * @summary Get 
         * @param {number} id siri ride stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiriRideStopsGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiriRideStopPydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiriRideStopsGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.getSiriRideStopsGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a single siri ride based on id
         * @summary Get 
         * @param {number} id siri ride id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiriRidesGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiriRidePydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiriRidesGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.getSiriRidesGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a single siri route based on id
         * @summary Get 
         * @param {number} id siri route id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiriRoutesGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiriRoutePydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiriRoutesGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.getSiriRoutesGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a single siri snapshot based on id
         * @summary Get 
         * @param {number} id siri snapshot id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiriSnapshotsGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiriSnapshotPydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiriSnapshotsGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.getSiriSnapshotsGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a single siri stop based on id
         * @summary Get 
         * @param {number} id siri stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiriStopsGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiriStopPydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiriStopsGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.getSiriStopsGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a single siri vehicle location based on id
         * @summary Get 
         * @param {number} id siri vehicle location id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSiriVehicleLocationsGetGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SiriVehicleLocationPydanticModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSiriVehicleLocationsGetGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.getSiriVehicleLocationsGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of siri ride stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [siriStopIds]   Filter by siri stop id. Comma-separated list of values.
         * @param {string} [siriRideIds]   Filter by siri ride id. Comma-separated list of values.
         * @param {number} [siriVehicleLocationLonGreaterOrEqual]   Filter by siri vehicle location lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [siriVehicleLocationLonLowerOrEqual]   Filter by siri vehicle location lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {number} [siriVehicleLocationLatGreaterOrEqual]   Filter by siri vehicle location lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [siriVehicleLocationLatLowerOrEqual]   Filter by siri vehicle location lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {string} [siriVehicleLocationRecordedAtTimeFrom]   Filter by siri vehicle location recorded at time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriVehicleLocationRecordedAtTimeTo]   Filter by siri vehicle location recorded at time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRideScheduledStartTimeFrom]   Filter by siri ride scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRideScheduledStartTimeTo]   Filter by siri ride scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {number} [gtfsStopLatGreaterOrEqual]   Filter by gtfs stop lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [gtfsStopLatLowerOrEqual]   Filter by gtfs stop lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {number} [gtfsStopLonGreaterOrEqual]   Filter by gtfs stop lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [gtfsStopLonLowerOrEqual]   Filter by gtfs stop lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {string} [gtfsDateFrom] filter all gtfs related records on this date  Filter by gtfs date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsDateTo] filter all gtfs related records on this date  Filter by gtfs date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSiriRideStopsListGet(limit?: number, offset?: number, getCount?: boolean, siriStopIds?: string, siriRideIds?: string, siriVehicleLocationLonGreaterOrEqual?: number, siriVehicleLocationLonLowerOrEqual?: number, siriVehicleLocationLatGreaterOrEqual?: number, siriVehicleLocationLatLowerOrEqual?: number, siriVehicleLocationRecordedAtTimeFrom?: string, siriVehicleLocationRecordedAtTimeTo?: string, siriRideScheduledStartTimeFrom?: string, siriRideScheduledStartTimeTo?: string, gtfsStopLatGreaterOrEqual?: number, gtfsStopLatLowerOrEqual?: number, gtfsStopLonGreaterOrEqual?: number, gtfsStopLonLowerOrEqual?: number, gtfsDateFrom?: string, gtfsDateTo?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SiriRideStopWithRelatedPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSiriRideStopsListGet(limit, offset, getCount, siriStopIds, siriRideIds, siriVehicleLocationLonGreaterOrEqual, siriVehicleLocationLonLowerOrEqual, siriVehicleLocationLatGreaterOrEqual, siriVehicleLocationLatLowerOrEqual, siriVehicleLocationRecordedAtTimeFrom, siriVehicleLocationRecordedAtTimeTo, siriRideScheduledStartTimeFrom, siriRideScheduledStartTimeTo, gtfsStopLatGreaterOrEqual, gtfsStopLatLowerOrEqual, gtfsStopLonGreaterOrEqual, gtfsStopLonLowerOrEqual, gtfsDateFrom, gtfsDateTo, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.listSiriRideStopsListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of siri rides.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {number} [gtfsRideGtfsRouteId]   Filter by related gtfs ride\&#39;s gtfs route id. Only return items which exactly match given string.
         * @param {string} [gtfsRideJourneyRefPrefix]   Filter by related gtfs ride\&#39;s journey ref prefix. Only return items which start with given string.
         * @param {string} [gtfsRideStartTimeFrom]   Filter by related gtfs ride\&#39;s start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRideStartTimeTo]   Filter by related gtfs ride\&#39;s start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRouteIds]   Filter by siri route ids. Comma-separated list of values.
         * @param {string} [siriRouteLineRefs]   Filter by siri route line refs. Comma-separated list of values.
         * @param {string} [siriRouteOperatorRefs]   Filter by siri route operator refs. Comma-separated list of values.
         * @param {string} [journeyRefPrefix]   Filter by journey ref prefix. Only return items which start with given string.
         * @param {string} [journeyRefs]   Filter by journey ref. Comma-separated list of values.
         * @param {string} [vehicleRefs]   Filter by vehicle ref. Comma-separated list of values.
         * @param {string} [scheduledStartTimeFrom]   Filter by scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [scheduledStartTimeTo]   Filter by scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSiriRidesListGet(limit?: number, offset?: number, getCount?: boolean, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, gtfsRideGtfsRouteId?: number, gtfsRideJourneyRefPrefix?: string, gtfsRideStartTimeFrom?: string, gtfsRideStartTimeTo?: string, siriRouteIds?: string, siriRouteLineRefs?: string, siriRouteOperatorRefs?: string, journeyRefPrefix?: string, journeyRefs?: string, vehicleRefs?: string, scheduledStartTimeFrom?: string, scheduledStartTimeTo?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SiriRideWithRelatedPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSiriRidesListGet(limit, offset, getCount, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, gtfsRideGtfsRouteId, gtfsRideJourneyRefPrefix, gtfsRideStartTimeFrom, gtfsRideStartTimeTo, siriRouteIds, siriRouteLineRefs, siriRouteOperatorRefs, journeyRefPrefix, journeyRefs, vehicleRefs, scheduledStartTimeFrom, scheduledStartTimeTo, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.listSiriRidesListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of siri routes.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [lineRefs]   Filter by line ref. Comma-separated list of values.
         * @param {string} [operatorRefs]   Filter by operator ref. Comma-separated list of values.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSiriRoutesListGet(limit?: number, offset?: number, getCount?: boolean, lineRefs?: string, operatorRefs?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SiriRoutePydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSiriRoutesListGet(limit, offset, getCount, lineRefs, operatorRefs, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.listSiriRoutesListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of siri snapshots.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [snapshotIdPrefix]   Filter by snapshot id prefix. Only return items which start with given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSiriSnapshotsListGet(limit?: number, offset?: number, getCount?: boolean, snapshotIdPrefix?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SiriSnapshotPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSiriSnapshotsListGet(limit, offset, getCount, snapshotIdPrefix, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.listSiriSnapshotsListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of siri stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [codes]   Filter by stop code. Comma-separated list of values.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSiriStopsListGet(limit?: number, offset?: number, getCount?: boolean, codes?: string, orderBy?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SiriStopPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSiriStopsListGet(limit, offset, getCount, codes, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.listSiriStopsListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of siri vehicle locations.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [siriVehicleLocationIds]   Filter by siri vehicle location id. Comma-separated list of values.
         * @param {string} [siriSnapshotIds]   Filter by siri snapshot id. Comma-separated list of values.
         * @param {string} [siriRideStopIds]   Filter by siri ride stop id. Comma-separated list of values.
         * @param {string} [recordedAtTimeFrom]   Filter by recorded at time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [recordedAtTimeTo]   Filter by recorded at time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {number} [lonGreaterOrEqual]   Filter by lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [lonLowerOrEqual]   Filter by lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {number} [latGreaterOrEqual]   Filter by lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [latLowerOrEqual]   Filter by lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {string} [siriRoutesLineRef]   Filter by siri route line ref. Only return items which exactly match given string.
         * @param {string} [siriRideVehicleRef]   Filter by siri ride vehicle ref. Only return items which exactly match given string.
         * @param {string} [siriRoutesOperatorRef]   Filter by siri route operator ref. Only return items which exactly match given string.
         * @param {string} [siriRidesSchedualedStartTimeFrom]   Filter by siri ride scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRidesSchedualedStartTimeTo]   Filter by siri ride scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRidesIds]   Filter by siri ride id. Comma-separated list of values.
         * @param {string} [siriRoutesIds]   Filter by siri route id. Comma-separated list of values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSiriVehicleLocationsListGet(limit?: number, offset?: number, getCount?: boolean, siriVehicleLocationIds?: string, siriSnapshotIds?: string, siriRideStopIds?: string, recordedAtTimeFrom?: string, recordedAtTimeTo?: string, lonGreaterOrEqual?: number, lonLowerOrEqual?: number, latGreaterOrEqual?: number, latLowerOrEqual?: number, orderBy?: string, siriRoutesLineRef?: string, siriRideVehicleRef?: string, siriRoutesOperatorRef?: string, siriRidesSchedualedStartTimeFrom?: string, siriRidesSchedualedStartTimeTo?: string, siriRidesIds?: string, siriRoutesIds?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SiriVehicleLocationWithRelatedPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSiriVehicleLocationsListGet(limit, offset, getCount, siriVehicleLocationIds, siriSnapshotIds, siriRideStopIds, recordedAtTimeFrom, recordedAtTimeTo, lonGreaterOrEqual, lonLowerOrEqual, latGreaterOrEqual, latLowerOrEqual, orderBy, siriRoutesLineRef, siriRideVehicleRef, siriRoutesOperatorRef, siriRidesSchedualedStartTimeFrom, siriRidesSchedualedStartTimeTo, siriRidesIds, siriRoutesIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SiriApi.listSiriVehicleLocationsListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SiriApi - factory interface
 * @export
 */
export const SiriApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SiriApiFp(configuration)
    return {
        /**
         * Return a single siri ride stop based on id
         * @summary Get 
         * @param {number} id siri ride stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriRideStopsGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SiriRideStopPydanticModel> {
            return localVarFp.getSiriRideStopsGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single siri ride based on id
         * @summary Get 
         * @param {number} id siri ride id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriRidesGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SiriRidePydanticModel> {
            return localVarFp.getSiriRidesGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single siri route based on id
         * @summary Get 
         * @param {number} id siri route id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriRoutesGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SiriRoutePydanticModel> {
            return localVarFp.getSiriRoutesGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single siri snapshot based on id
         * @summary Get 
         * @param {number} id siri snapshot id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriSnapshotsGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SiriSnapshotPydanticModel> {
            return localVarFp.getSiriSnapshotsGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single siri stop based on id
         * @summary Get 
         * @param {number} id siri stop id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriStopsGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SiriStopPydanticModel> {
            return localVarFp.getSiriStopsGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a single siri vehicle location based on id
         * @summary Get 
         * @param {number} id siri vehicle location id to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSiriVehicleLocationsGetGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<SiriVehicleLocationPydanticModel> {
            return localVarFp.getSiriVehicleLocationsGetGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List of siri ride stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [siriStopIds]   Filter by siri stop id. Comma-separated list of values.
         * @param {string} [siriRideIds]   Filter by siri ride id. Comma-separated list of values.
         * @param {number} [siriVehicleLocationLonGreaterOrEqual]   Filter by siri vehicle location lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [siriVehicleLocationLonLowerOrEqual]   Filter by siri vehicle location lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {number} [siriVehicleLocationLatGreaterOrEqual]   Filter by siri vehicle location lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [siriVehicleLocationLatLowerOrEqual]   Filter by siri vehicle location lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {string} [siriVehicleLocationRecordedAtTimeFrom]   Filter by siri vehicle location recorded at time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriVehicleLocationRecordedAtTimeTo]   Filter by siri vehicle location recorded at time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRideScheduledStartTimeFrom]   Filter by siri ride scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRideScheduledStartTimeTo]   Filter by siri ride scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {number} [gtfsStopLatGreaterOrEqual]   Filter by gtfs stop lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [gtfsStopLatLowerOrEqual]   Filter by gtfs stop lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {number} [gtfsStopLonGreaterOrEqual]   Filter by gtfs stop lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [gtfsStopLonLowerOrEqual]   Filter by gtfs stop lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {string} [gtfsDateFrom] filter all gtfs related records on this date  Filter by gtfs date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsDateTo] filter all gtfs related records on this date  Filter by gtfs date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriRideStopsListGet(limit?: number, offset?: number, getCount?: boolean, siriStopIds?: string, siriRideIds?: string, siriVehicleLocationLonGreaterOrEqual?: number, siriVehicleLocationLonLowerOrEqual?: number, siriVehicleLocationLatGreaterOrEqual?: number, siriVehicleLocationLatLowerOrEqual?: number, siriVehicleLocationRecordedAtTimeFrom?: string, siriVehicleLocationRecordedAtTimeTo?: string, siriRideScheduledStartTimeFrom?: string, siriRideScheduledStartTimeTo?: string, gtfsStopLatGreaterOrEqual?: number, gtfsStopLatLowerOrEqual?: number, gtfsStopLonGreaterOrEqual?: number, gtfsStopLonLowerOrEqual?: number, gtfsDateFrom?: string, gtfsDateTo?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SiriRideStopWithRelatedPydanticModel>> {
            return localVarFp.listSiriRideStopsListGet(limit, offset, getCount, siriStopIds, siriRideIds, siriVehicleLocationLonGreaterOrEqual, siriVehicleLocationLonLowerOrEqual, siriVehicleLocationLatGreaterOrEqual, siriVehicleLocationLatLowerOrEqual, siriVehicleLocationRecordedAtTimeFrom, siriVehicleLocationRecordedAtTimeTo, siriRideScheduledStartTimeFrom, siriRideScheduledStartTimeTo, gtfsStopLatGreaterOrEqual, gtfsStopLatLowerOrEqual, gtfsStopLonGreaterOrEqual, gtfsStopLonLowerOrEqual, gtfsDateFrom, gtfsDateTo, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List of siri rides.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
         * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
         * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
         * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
         * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
         * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
         * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
         * @param {number} [gtfsRideGtfsRouteId]   Filter by related gtfs ride\&#39;s gtfs route id. Only return items which exactly match given string.
         * @param {string} [gtfsRideJourneyRefPrefix]   Filter by related gtfs ride\&#39;s journey ref prefix. Only return items which start with given string.
         * @param {string} [gtfsRideStartTimeFrom]   Filter by related gtfs ride\&#39;s start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [gtfsRideStartTimeTo]   Filter by related gtfs ride\&#39;s start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRouteIds]   Filter by siri route ids. Comma-separated list of values.
         * @param {string} [siriRouteLineRefs]   Filter by siri route line refs. Comma-separated list of values.
         * @param {string} [siriRouteOperatorRefs]   Filter by siri route operator refs. Comma-separated list of values.
         * @param {string} [journeyRefPrefix]   Filter by journey ref prefix. Only return items which start with given string.
         * @param {string} [journeyRefs]   Filter by journey ref. Comma-separated list of values.
         * @param {string} [vehicleRefs]   Filter by vehicle ref. Comma-separated list of values.
         * @param {string} [scheduledStartTimeFrom]   Filter by scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [scheduledStartTimeTo]   Filter by scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriRidesListGet(limit?: number, offset?: number, getCount?: boolean, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, gtfsRideGtfsRouteId?: number, gtfsRideJourneyRefPrefix?: string, gtfsRideStartTimeFrom?: string, gtfsRideStartTimeTo?: string, siriRouteIds?: string, siriRouteLineRefs?: string, siriRouteOperatorRefs?: string, journeyRefPrefix?: string, journeyRefs?: string, vehicleRefs?: string, scheduledStartTimeFrom?: string, scheduledStartTimeTo?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SiriRideWithRelatedPydanticModel>> {
            return localVarFp.listSiriRidesListGet(limit, offset, getCount, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, gtfsRideGtfsRouteId, gtfsRideJourneyRefPrefix, gtfsRideStartTimeFrom, gtfsRideStartTimeTo, siriRouteIds, siriRouteLineRefs, siriRouteOperatorRefs, journeyRefPrefix, journeyRefs, vehicleRefs, scheduledStartTimeFrom, scheduledStartTimeTo, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List of siri routes.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [lineRefs]   Filter by line ref. Comma-separated list of values.
         * @param {string} [operatorRefs]   Filter by operator ref. Comma-separated list of values.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriRoutesListGet(limit?: number, offset?: number, getCount?: boolean, lineRefs?: string, operatorRefs?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SiriRoutePydanticModel>> {
            return localVarFp.listSiriRoutesListGet(limit, offset, getCount, lineRefs, operatorRefs, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List of siri snapshots.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [snapshotIdPrefix]   Filter by snapshot id prefix. Only return items which start with given string.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriSnapshotsListGet(limit?: number, offset?: number, getCount?: boolean, snapshotIdPrefix?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SiriSnapshotPydanticModel>> {
            return localVarFp.listSiriSnapshotsListGet(limit, offset, getCount, snapshotIdPrefix, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List of siri stops.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [codes]   Filter by stop code. Comma-separated list of values.
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriStopsListGet(limit?: number, offset?: number, getCount?: boolean, codes?: string, orderBy?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SiriStopPydanticModel>> {
            return localVarFp.listSiriStopsListGet(limit, offset, getCount, codes, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * List of siri vehicle locations.
         * @summary List 
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {string} [siriVehicleLocationIds]   Filter by siri vehicle location id. Comma-separated list of values.
         * @param {string} [siriSnapshotIds]   Filter by siri snapshot id. Comma-separated list of values.
         * @param {string} [siriRideStopIds]   Filter by siri ride stop id. Comma-separated list of values.
         * @param {string} [recordedAtTimeFrom]   Filter by recorded at time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [recordedAtTimeTo]   Filter by recorded at time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {number} [lonGreaterOrEqual]   Filter by lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
         * @param {number} [lonLowerOrEqual]   Filter by lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
         * @param {number} [latGreaterOrEqual]   Filter by lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
         * @param {number} [latLowerOrEqual]   Filter by lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
         * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
         * @param {string} [siriRoutesLineRef]   Filter by siri route line ref. Only return items which exactly match given string.
         * @param {string} [siriRideVehicleRef]   Filter by siri ride vehicle ref. Only return items which exactly match given string.
         * @param {string} [siriRoutesOperatorRef]   Filter by siri route operator ref. Only return items which exactly match given string.
         * @param {string} [siriRidesSchedualedStartTimeFrom]   Filter by siri ride scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRidesSchedualedStartTimeTo]   Filter by siri ride scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
         * @param {string} [siriRidesIds]   Filter by siri ride id. Comma-separated list of values.
         * @param {string} [siriRoutesIds]   Filter by siri route id. Comma-separated list of values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSiriVehicleLocationsListGet(limit?: number, offset?: number, getCount?: boolean, siriVehicleLocationIds?: string, siriSnapshotIds?: string, siriRideStopIds?: string, recordedAtTimeFrom?: string, recordedAtTimeTo?: string, lonGreaterOrEqual?: number, lonLowerOrEqual?: number, latGreaterOrEqual?: number, latLowerOrEqual?: number, orderBy?: string, siriRoutesLineRef?: string, siriRideVehicleRef?: string, siriRoutesOperatorRef?: string, siriRidesSchedualedStartTimeFrom?: string, siriRidesSchedualedStartTimeTo?: string, siriRidesIds?: string, siriRoutesIds?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SiriVehicleLocationWithRelatedPydanticModel>> {
            return localVarFp.listSiriVehicleLocationsListGet(limit, offset, getCount, siriVehicleLocationIds, siriSnapshotIds, siriRideStopIds, recordedAtTimeFrom, recordedAtTimeTo, lonGreaterOrEqual, lonLowerOrEqual, latGreaterOrEqual, latLowerOrEqual, orderBy, siriRoutesLineRef, siriRideVehicleRef, siriRoutesOperatorRef, siriRidesSchedualedStartTimeFrom, siriRidesSchedualedStartTimeTo, siriRidesIds, siriRoutesIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SiriApi - object-oriented interface
 * @export
 * @class SiriApi
 * @extends {BaseAPI}
 */
export class SiriApi extends BaseAPI {
    /**
     * Return a single siri ride stop based on id
     * @summary Get 
     * @param {number} id siri ride stop id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public getSiriRideStopsGetGet(id: number, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).getSiriRideStopsGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a single siri ride based on id
     * @summary Get 
     * @param {number} id siri ride id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public getSiriRidesGetGet(id: number, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).getSiriRidesGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a single siri route based on id
     * @summary Get 
     * @param {number} id siri route id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public getSiriRoutesGetGet(id: number, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).getSiriRoutesGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a single siri snapshot based on id
     * @summary Get 
     * @param {number} id siri snapshot id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public getSiriSnapshotsGetGet(id: number, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).getSiriSnapshotsGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a single siri stop based on id
     * @summary Get 
     * @param {number} id siri stop id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public getSiriStopsGetGet(id: number, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).getSiriStopsGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a single siri vehicle location based on id
     * @summary Get 
     * @param {number} id siri vehicle location id to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public getSiriVehicleLocationsGetGet(id: number, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).getSiriVehicleLocationsGetGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of siri ride stops.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [siriStopIds]   Filter by siri stop id. Comma-separated list of values.
     * @param {string} [siriRideIds]   Filter by siri ride id. Comma-separated list of values.
     * @param {number} [siriVehicleLocationLonGreaterOrEqual]   Filter by siri vehicle location lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
     * @param {number} [siriVehicleLocationLonLowerOrEqual]   Filter by siri vehicle location lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
     * @param {number} [siriVehicleLocationLatGreaterOrEqual]   Filter by siri vehicle location lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
     * @param {number} [siriVehicleLocationLatLowerOrEqual]   Filter by siri vehicle location lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
     * @param {string} [siriVehicleLocationRecordedAtTimeFrom]   Filter by siri vehicle location recorded at time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [siriVehicleLocationRecordedAtTimeTo]   Filter by siri vehicle location recorded at time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [siriRideScheduledStartTimeFrom]   Filter by siri ride scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [siriRideScheduledStartTimeTo]   Filter by siri ride scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {number} [gtfsStopLatGreaterOrEqual]   Filter by gtfs stop lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
     * @param {number} [gtfsStopLatLowerOrEqual]   Filter by gtfs stop lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
     * @param {number} [gtfsStopLonGreaterOrEqual]   Filter by gtfs stop lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
     * @param {number} [gtfsStopLonLowerOrEqual]   Filter by gtfs stop lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
     * @param {string} [gtfsDateFrom] filter all gtfs related records on this date  Filter by gtfs date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [gtfsDateTo] filter all gtfs related records on this date  Filter by gtfs date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public listSiriRideStopsListGet(limit?: number, offset?: number, getCount?: boolean, siriStopIds?: string, siriRideIds?: string, siriVehicleLocationLonGreaterOrEqual?: number, siriVehicleLocationLonLowerOrEqual?: number, siriVehicleLocationLatGreaterOrEqual?: number, siriVehicleLocationLatLowerOrEqual?: number, siriVehicleLocationRecordedAtTimeFrom?: string, siriVehicleLocationRecordedAtTimeTo?: string, siriRideScheduledStartTimeFrom?: string, siriRideScheduledStartTimeTo?: string, gtfsStopLatGreaterOrEqual?: number, gtfsStopLatLowerOrEqual?: number, gtfsStopLonGreaterOrEqual?: number, gtfsStopLonLowerOrEqual?: number, gtfsDateFrom?: string, gtfsDateTo?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).listSiriRideStopsListGet(limit, offset, getCount, siriStopIds, siriRideIds, siriVehicleLocationLonGreaterOrEqual, siriVehicleLocationLonLowerOrEqual, siriVehicleLocationLatGreaterOrEqual, siriVehicleLocationLatLowerOrEqual, siriVehicleLocationRecordedAtTimeFrom, siriVehicleLocationRecordedAtTimeTo, siriRideScheduledStartTimeFrom, siriRideScheduledStartTimeTo, gtfsStopLatGreaterOrEqual, gtfsStopLatLowerOrEqual, gtfsStopLonGreaterOrEqual, gtfsStopLonLowerOrEqual, gtfsDateFrom, gtfsDateTo, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of siri rides.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [gtfsRouteDateFrom]   Filter by related gtfs route\&#39;s date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [gtfsRouteDateTo]   Filter by related gtfs route\&#39;s date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} [gtfsRouteLineRefs]   Filter by related gtfs route\&#39;s line ref. Comma-separated list of values.
     * @param {string} [gtfsRouteOperatorRefs] Agency identifier. To get it, first query gtfs_agencies.  Filter by related gtfs route\&#39;s operator ref. Comma-separated list of values.  Example: 3 for Eged
     * @param {string} [gtfsRouteRouteShortName] Line number.  Filter by related gtfs route\&#39;s route short name. Only return items which exactly match given string.  Example: 480
     * @param {string} [gtfsRouteRouteLongNameContains]   Filter by related gtfs route\&#39;s route long name. Only return items which contain given string.
     * @param {string} [gtfsRouteRouteMkt]   Filter by related gtfs route\&#39;s route mkt. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteDirection]   Filter by related gtfs route\&#39;s route direction. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteAlternative]   Filter by related gtfs route\&#39;s route alternative. Only return items which exactly match given string.
     * @param {string} [gtfsRouteAgencyName]   Filter by related gtfs route\&#39;s agency name. Only return items which exactly match given string.
     * @param {string} [gtfsRouteRouteType]   Filter by related gtfs route\&#39;s route type. Only return items which exactly match given string.
     * @param {number} [gtfsRideGtfsRouteId]   Filter by related gtfs ride\&#39;s gtfs route id. Only return items which exactly match given string.
     * @param {string} [gtfsRideJourneyRefPrefix]   Filter by related gtfs ride\&#39;s journey ref prefix. Only return items which start with given string.
     * @param {string} [gtfsRideStartTimeFrom]   Filter by related gtfs ride\&#39;s start time from. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [gtfsRideStartTimeTo]   Filter by related gtfs ride\&#39;s start time to. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [siriRouteIds]   Filter by siri route ids. Comma-separated list of values.
     * @param {string} [siriRouteLineRefs]   Filter by siri route line refs. Comma-separated list of values.
     * @param {string} [siriRouteOperatorRefs]   Filter by siri route operator refs. Comma-separated list of values.
     * @param {string} [journeyRefPrefix]   Filter by journey ref prefix. Only return items which start with given string.
     * @param {string} [journeyRefs]   Filter by journey ref. Comma-separated list of values.
     * @param {string} [vehicleRefs]   Filter by vehicle ref. Comma-separated list of values.
     * @param {string} [scheduledStartTimeFrom]   Filter by scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [scheduledStartTimeTo]   Filter by scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public listSiriRidesListGet(limit?: number, offset?: number, getCount?: boolean, gtfsRouteDateFrom?: string, gtfsRouteDateTo?: string, gtfsRouteLineRefs?: string, gtfsRouteOperatorRefs?: string, gtfsRouteRouteShortName?: string, gtfsRouteRouteLongNameContains?: string, gtfsRouteRouteMkt?: string, gtfsRouteRouteDirection?: string, gtfsRouteRouteAlternative?: string, gtfsRouteAgencyName?: string, gtfsRouteRouteType?: string, gtfsRideGtfsRouteId?: number, gtfsRideJourneyRefPrefix?: string, gtfsRideStartTimeFrom?: string, gtfsRideStartTimeTo?: string, siriRouteIds?: string, siriRouteLineRefs?: string, siriRouteOperatorRefs?: string, journeyRefPrefix?: string, journeyRefs?: string, vehicleRefs?: string, scheduledStartTimeFrom?: string, scheduledStartTimeTo?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).listSiriRidesListGet(limit, offset, getCount, gtfsRouteDateFrom, gtfsRouteDateTo, gtfsRouteLineRefs, gtfsRouteOperatorRefs, gtfsRouteRouteShortName, gtfsRouteRouteLongNameContains, gtfsRouteRouteMkt, gtfsRouteRouteDirection, gtfsRouteRouteAlternative, gtfsRouteAgencyName, gtfsRouteRouteType, gtfsRideGtfsRouteId, gtfsRideJourneyRefPrefix, gtfsRideStartTimeFrom, gtfsRideStartTimeTo, siriRouteIds, siriRouteLineRefs, siriRouteOperatorRefs, journeyRefPrefix, journeyRefs, vehicleRefs, scheduledStartTimeFrom, scheduledStartTimeTo, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of siri routes.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [lineRefs]   Filter by line ref. Comma-separated list of values.
     * @param {string} [operatorRefs]   Filter by operator ref. Comma-separated list of values.
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public listSiriRoutesListGet(limit?: number, offset?: number, getCount?: boolean, lineRefs?: string, operatorRefs?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).listSiriRoutesListGet(limit, offset, getCount, lineRefs, operatorRefs, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of siri snapshots.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [snapshotIdPrefix]   Filter by snapshot id prefix. Only return items which start with given string.
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public listSiriSnapshotsListGet(limit?: number, offset?: number, getCount?: boolean, snapshotIdPrefix?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).listSiriSnapshotsListGet(limit, offset, getCount, snapshotIdPrefix, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of siri stops.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [codes]   Filter by stop code. Comma-separated list of values.
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public listSiriStopsListGet(limit?: number, offset?: number, getCount?: boolean, codes?: string, orderBy?: string, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).listSiriStopsListGet(limit, offset, getCount, codes, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of siri vehicle locations.
     * @summary List 
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 100 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {string} [siriVehicleLocationIds]   Filter by siri vehicle location id. Comma-separated list of values.
     * @param {string} [siriSnapshotIds]   Filter by siri snapshot id. Comma-separated list of values.
     * @param {string} [siriRideStopIds]   Filter by siri ride stop id. Comma-separated list of values.
     * @param {string} [recordedAtTimeFrom]   Filter by recorded at time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [recordedAtTimeTo]   Filter by recorded at time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {number} [lonGreaterOrEqual]   Filter by lon. Only return items which have a numeric value greater than or equal to given value  Example: 34.808
     * @param {number} [lonLowerOrEqual]   Filter by lon. Only return items which have a numeric value lower than or equal to given value  Example: 34.808
     * @param {number} [latGreaterOrEqual]   Filter by lat. Only return items which have a numeric value greater than or equal to given value  Example: 31.961
     * @param {number} [latLowerOrEqual]   Filter by lat. Only return items which have a numeric value lower than or equal to given value  Example: 31.961
     * @param {string} [orderBy] Order of the results. Comma-separated list of fields and direction. e.g. \&quot;field1 asc,field2 desc\&quot;.
     * @param {string} [siriRoutesLineRef]   Filter by siri route line ref. Only return items which exactly match given string.
     * @param {string} [siriRideVehicleRef]   Filter by siri ride vehicle ref. Only return items which exactly match given string.
     * @param {string} [siriRoutesOperatorRef]   Filter by siri route operator ref. Only return items which exactly match given string.
     * @param {string} [siriRidesSchedualedStartTimeFrom]   Filter by siri ride scheduled start time. Only return items which have date/time after or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [siriRidesSchedualedStartTimeTo]   Filter by siri ride scheduled start time. Only return items which have date/time before or equals to given value. Format: \&quot;YYYY-MM-DDTHH:MM:SS+Z\&quot;, e.g. \&quot;2021-11-03T15:48:49+02:00\&quot;. Note that all date/times must have a timezone specification.
     * @param {string} [siriRidesIds]   Filter by siri ride id. Comma-separated list of values.
     * @param {string} [siriRoutesIds]   Filter by siri route id. Comma-separated list of values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SiriApi
     */
    public listSiriVehicleLocationsListGet(limit?: number, offset?: number, getCount?: boolean, siriVehicleLocationIds?: string, siriSnapshotIds?: string, siriRideStopIds?: string, recordedAtTimeFrom?: string, recordedAtTimeTo?: string, lonGreaterOrEqual?: number, lonLowerOrEqual?: number, latGreaterOrEqual?: number, latLowerOrEqual?: number, orderBy?: string, siriRoutesLineRef?: string, siriRideVehicleRef?: string, siriRoutesOperatorRef?: string, siriRidesSchedualedStartTimeFrom?: string, siriRidesSchedualedStartTimeTo?: string, siriRidesIds?: string, siriRoutesIds?: string, options?: RawAxiosRequestConfig) {
        return SiriApiFp(this.configuration).listSiriVehicleLocationsListGet(limit, offset, getCount, siriVehicleLocationIds, siriSnapshotIds, siriRideStopIds, recordedAtTimeFrom, recordedAtTimeTo, lonGreaterOrEqual, lonLowerOrEqual, latGreaterOrEqual, latLowerOrEqual, orderBy, siriRoutesLineRef, siriRideVehicleRef, siriRoutesOperatorRef, siriRidesSchedualedStartTimeFrom, siriRidesSchedualedStartTimeTo, siriRidesIds, siriRoutesIds, options).then((request) => request(this.axios, this.basePath));
    }
}

