/* tslint:disable */
/* eslint-disable */
/**
 * Open Bus Stride API
 * ### Follow planned and real-time bus statistics ðŸšŒ  Welcome to The Public Knowledge Workshop\'s Stride project. We provide usable and accurate data about the Israeli public transportation system.  For background on the project and some more detailed documentation and usage guides, see [STRIDE.md](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE.md).  Looking for a specific use-case?  * Take a look at the **user cases** APIs below. * Try one of our existing [jupyter notebooks](https://github.com/hasadna/open-bus-stride-client/blob/main/README.md#using-the-interactive-jupyter-notebooks). * Don\'t see your use-case covered here? Please [open us a ticket](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhasadna%2Fopen-bus%2Fissues%2Fnew)!  Queries are by default limited to 100 results per query, this limit can be increased up to 500,000 results. Please try to set appropriate query parameters to limit the results to reduce load on our DB. If you do need to get large number of results (up to 500,000) it\'s recommended to use one of these methods:  1. Use HTTP streaming and JSON streaming decoder, this method is most efficient and provide accurate results.    Our [Stride Python Client iterate method](https://github.com/hasadna/open-bus-stride-client#usage) uses this method. 2. Use combination of limit / offset parameters to get results by page. This method may be less accurate because    it depends on data remaining unchanged between requests.  For more advanced usage-  * Use **gtfs** for data about the planned lines timetables.  * Use **siri** for data about lines real-time * See [Open Bus Stride Data Model](https://github.com/hasadna/open-bus-stride-db/blob/main/DATA_MODEL.md) for description of field and table names. * See [Open Bus Stride ETL Processes](https://github.com/hasadna/open-bus-pipelines/blob/main/STRIDE_ETL_PROCESSES.md) for description of the ETL processes which fetch and aggregate the data. * See [MOT Developer Information](https://www.gov.il/BlobFolder/generalpage/gtfs_general_transit_feed_specifications/he/GTFS%20-%20Developer%20Information.pdf) for description of the source fields as published by the Israel Ministry of Transportation. 
 *
 * The version of the OpenAPI document: local-development
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GtfsRidesAggGroupByPydanticModel } from '../models';
// @ts-ignore
import type { GtfsRidesAggPydanticModel } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * AggregationsApi - axios parameter creator
 * @export
 */
export const AggregationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * gtfs rides aggregation grouped by given fields.
         * @summary Group By 
         * @param {string} dateFrom   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} dateTo   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} groupBy Comma-separated list of fields to group by. Valid values: gtfs_route_date, gtfs_route_hour, operator_ref, day_of_week, line_ref.
         * @param {number} [excludeHoursFrom] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have an hour date after or equals to given value. Format: 0(12AM)-23
         * @param {number} [excludeHoursTo] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have a date before or equals to given value. Format: 0(12AM)-23
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByGtfsRidesAggGroupByGet: async (dateFrom: string, dateTo: string, groupBy: string, excludeHoursFrom?: number, excludeHoursTo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dateFrom' is not null or undefined
            assertParamExists('groupByGtfsRidesAggGroupByGet', 'dateFrom', dateFrom)
            // verify required parameter 'dateTo' is not null or undefined
            assertParamExists('groupByGtfsRidesAggGroupByGet', 'dateTo', dateTo)
            // verify required parameter 'groupBy' is not null or undefined
            assertParamExists('groupByGtfsRidesAggGroupByGet', 'groupBy', groupBy)
            const localVarPath = `/gtfs_rides_agg/group_by`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }

            if (excludeHoursFrom !== undefined) {
                localVarQueryParameter['exclude_hours_from'] = excludeHoursFrom;
            }

            if (excludeHoursTo !== undefined) {
                localVarQueryParameter['exclude_hours_to'] = excludeHoursTo;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['group_by'] = groupBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of gtfs rides aggregations.
         * @summary List 
         * @param {string} dateFrom   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} dateTo   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 1000 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {number} [excludeHoursFrom] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have an hour date after or equals to given value. Format: 0(12AM)-23
         * @param {number} [excludeHoursTo] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have a date before or equals to given value. Format: 0(12AM)-23
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsRidesAggListGet: async (dateFrom: string, dateTo: string, limit?: number, offset?: number, getCount?: boolean, excludeHoursFrom?: number, excludeHoursTo?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dateFrom' is not null or undefined
            assertParamExists('listGtfsRidesAggListGet', 'dateFrom', dateFrom)
            // verify required parameter 'dateTo' is not null or undefined
            assertParamExists('listGtfsRidesAggListGet', 'dateTo', dateTo)
            const localVarPath = `/gtfs_rides_agg/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (getCount !== undefined) {
                localVarQueryParameter['get_count'] = getCount;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }

            if (excludeHoursFrom !== undefined) {
                localVarQueryParameter['exclude_hours_from'] = excludeHoursFrom;
            }

            if (excludeHoursTo !== undefined) {
                localVarQueryParameter['exclude_hours_to'] = excludeHoursTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AggregationsApi - functional programming interface
 * @export
 */
export const AggregationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AggregationsApiAxiosParamCreator(configuration)
    return {
        /**
         * gtfs rides aggregation grouped by given fields.
         * @summary Group By 
         * @param {string} dateFrom   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} dateTo   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} groupBy Comma-separated list of fields to group by. Valid values: gtfs_route_date, gtfs_route_hour, operator_ref, day_of_week, line_ref.
         * @param {number} [excludeHoursFrom] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have an hour date after or equals to given value. Format: 0(12AM)-23
         * @param {number} [excludeHoursTo] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have a date before or equals to given value. Format: 0(12AM)-23
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupByGtfsRidesAggGroupByGet(dateFrom: string, dateTo: string, groupBy: string, excludeHoursFrom?: number, excludeHoursTo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtfsRidesAggGroupByPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupByGtfsRidesAggGroupByGet(dateFrom, dateTo, groupBy, excludeHoursFrom, excludeHoursTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AggregationsApi.groupByGtfsRidesAggGroupByGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of gtfs rides aggregations.
         * @summary List 
         * @param {string} dateFrom   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} dateTo   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 1000 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {number} [excludeHoursFrom] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have an hour date after or equals to given value. Format: 0(12AM)-23
         * @param {number} [excludeHoursTo] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have a date before or equals to given value. Format: 0(12AM)-23
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGtfsRidesAggListGet(dateFrom: string, dateTo: string, limit?: number, offset?: number, getCount?: boolean, excludeHoursFrom?: number, excludeHoursTo?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GtfsRidesAggPydanticModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGtfsRidesAggListGet(dateFrom, dateTo, limit, offset, getCount, excludeHoursFrom, excludeHoursTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AggregationsApi.listGtfsRidesAggListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AggregationsApi - factory interface
 * @export
 */
export const AggregationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AggregationsApiFp(configuration)
    return {
        /**
         * gtfs rides aggregation grouped by given fields.
         * @summary Group By 
         * @param {string} dateFrom   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} dateTo   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} groupBy Comma-separated list of fields to group by. Valid values: gtfs_route_date, gtfs_route_hour, operator_ref, day_of_week, line_ref.
         * @param {number} [excludeHoursFrom] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have an hour date after or equals to given value. Format: 0(12AM)-23
         * @param {number} [excludeHoursTo] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have a date before or equals to given value. Format: 0(12AM)-23
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByGtfsRidesAggGroupByGet(dateFrom: string, dateTo: string, groupBy: string, excludeHoursFrom?: number, excludeHoursTo?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GtfsRidesAggGroupByPydanticModel>> {
            return localVarFp.groupByGtfsRidesAggGroupByGet(dateFrom, dateTo, groupBy, excludeHoursFrom, excludeHoursTo, options).then((request) => request(axios, basePath));
        },
        /**
         * List of gtfs rides aggregations.
         * @summary List 
         * @param {string} dateFrom   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {string} dateTo   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
         * @param {number} [limit] Limit the number of returned results. If not specified will limit to 1000 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
         * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
         * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
         * @param {number} [excludeHoursFrom] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have an hour date after or equals to given value. Format: 0(12AM)-23
         * @param {number} [excludeHoursTo] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have a date before or equals to given value. Format: 0(12AM)-23
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGtfsRidesAggListGet(dateFrom: string, dateTo: string, limit?: number, offset?: number, getCount?: boolean, excludeHoursFrom?: number, excludeHoursTo?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GtfsRidesAggPydanticModel>> {
            return localVarFp.listGtfsRidesAggListGet(dateFrom, dateTo, limit, offset, getCount, excludeHoursFrom, excludeHoursTo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AggregationsApi - object-oriented interface
 * @export
 * @class AggregationsApi
 * @extends {BaseAPI}
 */
export class AggregationsApi extends BaseAPI {
    /**
     * gtfs rides aggregation grouped by given fields.
     * @summary Group By 
     * @param {string} dateFrom   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} dateTo   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} groupBy Comma-separated list of fields to group by. Valid values: gtfs_route_date, gtfs_route_hour, operator_ref, day_of_week, line_ref.
     * @param {number} [excludeHoursFrom] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have an hour date after or equals to given value. Format: 0(12AM)-23
     * @param {number} [excludeHoursTo] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have a date before or equals to given value. Format: 0(12AM)-23
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AggregationsApi
     */
    public groupByGtfsRidesAggGroupByGet(dateFrom: string, dateTo: string, groupBy: string, excludeHoursFrom?: number, excludeHoursTo?: number, options?: RawAxiosRequestConfig) {
        return AggregationsApiFp(this.configuration).groupByGtfsRidesAggGroupByGet(dateFrom, dateTo, groupBy, excludeHoursFrom, excludeHoursTo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of gtfs rides aggregations.
     * @summary List 
     * @param {string} dateFrom   Filter by date. Only return items which have a date after or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {string} dateTo   Filter by date. Only return items which have a date before or equals to given value. Format: \&quot;YYYY-MM-DD\&quot;, e.g. \&quot;2021-11-03\&quot;.
     * @param {number} [limit] Limit the number of returned results. If not specified will limit to 1000 results. To get more results, you can either use the offset param, alternatively - set the limit to -1 and use http streaming with compatible json streaming decoder to get all results, this method can fetch up to a maximum of 500000 results.
     * @param {number} [offset] Item number to start returning results from. Use in combination with limit for pagination, alternatively, don\&#39;t set offset, set limit to -1 and use http streaming with compatible json streaming decoder to get all results up to a maximum of 500000 results.
     * @param {boolean} [getCount] Set to \&quot;true\&quot; to only get the total number of results for given filters. limit/offset/order parameters will be ignored.
     * @param {number} [excludeHoursFrom] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have an hour date after or equals to given value. Format: 0(12AM)-23
     * @param {number} [excludeHoursTo] Hours to exclude from search, currently used to filter out edge cases.  Filter by hour. Only return items which have a date before or equals to given value. Format: 0(12AM)-23
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AggregationsApi
     */
    public listGtfsRidesAggListGet(dateFrom: string, dateTo: string, limit?: number, offset?: number, getCount?: boolean, excludeHoursFrom?: number, excludeHoursTo?: number, options?: RawAxiosRequestConfig) {
        return AggregationsApiFp(this.configuration).listGtfsRidesAggListGet(dateFrom, dateTo, limit, offset, getCount, excludeHoursFrom, excludeHoursTo, options).then((request) => request(this.axios, this.basePath));
    }
}

